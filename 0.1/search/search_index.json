{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UnitCommitment.jl UnitCommitment.jl is an optimization package for the Security-Constrained Unit Commitment Problem (SCUC), a fundamental optimization problem in power systems which is used, for example, to clear the day-ahead electricity markets. The problem asks for the most cost-effective power generation schedule under a number of physical, operational and economic constraints. Package Components Data Format: The package proposes an extensible and fully-documented JSON-based data specification format for SCUC, developed in collaboration with Independent System Operators (ISOs), which describes the most important aspects of the problem. Benchmark Instances: The package provides a diverse collection of large-scale benchmark instances collected from the literature and extended to make them more challenging and realistic, based on publicly available data from ISOs. Model Implementation : The package provides a Julia/JuMP implementation of state-of-the-art formulations and solution methods for SCUC. Our goal is to keep this implementation up-to-date, as new methods are proposed in the literature. Benchmark Tools: The package provides automated benchmark scripts to accurately evaluate the performance impact of proposed code changes. Contents Installation Guide Data Format Specification Authors Alinson Santos Xavier, Argonne National Laboratory Feng Qiu, Argonne National Laboratory Collaborators Yonghong Chen, Midcontinent Independent System Operator Feng Pan, Pacific Northwest National Laboratory","title":"Home"},{"location":"#unitcommitmentjl","text":"UnitCommitment.jl is an optimization package for the Security-Constrained Unit Commitment Problem (SCUC), a fundamental optimization problem in power systems which is used, for example, to clear the day-ahead electricity markets. The problem asks for the most cost-effective power generation schedule under a number of physical, operational and economic constraints.","title":"UnitCommitment.jl"},{"location":"#package-components","text":"Data Format: The package proposes an extensible and fully-documented JSON-based data specification format for SCUC, developed in collaboration with Independent System Operators (ISOs), which describes the most important aspects of the problem. Benchmark Instances: The package provides a diverse collection of large-scale benchmark instances collected from the literature and extended to make them more challenging and realistic, based on publicly available data from ISOs. Model Implementation : The package provides a Julia/JuMP implementation of state-of-the-art formulations and solution methods for SCUC. Our goal is to keep this implementation up-to-date, as new methods are proposed in the literature. Benchmark Tools: The package provides automated benchmark scripts to accurately evaluate the performance impact of proposed code changes.","title":"Package Components"},{"location":"#contents","text":"Installation Guide Data Format Specification","title":"Contents"},{"location":"#authors","text":"Alinson Santos Xavier, Argonne National Laboratory Feng Qiu, Argonne National Laboratory","title":"Authors"},{"location":"#collaborators","text":"Yonghong Chen, Midcontinent Independent System Operator Feng Pan, Pacific Northwest National Laboratory","title":"Collaborators"},{"location":"format/","text":"Data Format Instances are specified by JSON files containing the following main sections: Parameters Buses Generators Price-sensitive loads Transmission lines Reserves Contingencies Each section is described in detail below. For a complete example, see case14.json . Parameters This section describes system-wide parameters, such as power balance penalties, and optimization parameters, such as the length of the planning horizon. Key Description Default Time series? Time (h) Length of the planning horizon (in hours) Required N Power balance penalty ($/MW) Penalty for system-wide shortage or surplus in production (in $/MW). This is charged per time period. For example, if there is a shortage of 1 MW for three time periods, three times this amount will be charged. 1000.0 Y Example { \"Parameters\": { \"Time (h)\": 4, \"Power balance penalty ($/MW)\": 1000.0 } } Buses This section describes the characteristics of each bus in the system. Key Description Default Time series? Load (MW) Fixed load connected to the bus (in MW). Required Y Example { \"Buses\": { \"b1\": { \"Load (MW)\": 0.0 }, \"b2\": { \"Load (MW)\": [ 26.01527, 24.46212, 23.29725, 22.90897 ] } } } Generators This section describes all generators in the system, including thermal units, renewable units and virtual units. Key Description Default Time series? Bus Identifier of the bus where this generator is located (string) Required N Production cost curve (MW) and Production cost curve ($) Parameters describing the piecewise-linear production costs. See below for more details. Required Y Startup costs ($) and Startup delays (h) Parameters describing how much it costs to start the generator after it has been shut down for a certain amount of time. If Startup costs ($) and Startup delays (h) are set to [300.0, 400.0] and [1, 4] , for example, and the generator is shut down at time t , then it costs 300 to start up the generator at times t+1 , t+2 or t+3 , and 400 to start the generator at time t+4 or any time after that. The number of startup cost points is unlimited, and may be different for each generator. Startup delays must be strictly increasing. [0.0] and [1] N Minimum uptime (h) Minimum amount of time the generator must stay operational after starting up (in hours). For example, if the generator starts up at time 1 and Minimum uptime (h) is set to 4, then the generator can only shut down at time 5. 1 N Minimum downtime (h) Minimum amount of time the generator must stay offline after shutting down (in hours). For example, if the generator shuts down at time 1 and Minimum downtime (h) is set to 4, then the generator can only start producing power again at time 5. 1 N Ramp up limit (MW) Maximum increase in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and if this parameter is set to 40 MW, then the generator will produce at most 140 MW at time 2. +inf N Ramp down limit (MW) Maximum decrease in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and this parameter is set to 40 MW, then the generator will produce at least 60 MW at time 2. +inf N Startup limit (MW) Maximum amount of power a generator can produce immediately after starting up (in MW). +inf N Shutdown limit (MW) Maximum amount of power a generator can produce immediately before shutting down (in MW). Specifically, the generator can only shut down at time t+1 if its production at time t is below this limit. +inf N Initial status (h) If set to a positive number, indicates the amount of time the generator has been on at the beginning of the simulation, and if set to a negative number, the amount of time the generator has been off. For example, if Initial status (h) is -2 , this means that the generator was off at simulation time -2 and -1 . The simulation starts at time 0 . Required N Initial power (MW) Amount of power the generator at time period -1 , immediately before the planning horizon starts. Required N Must run? If true , the generator should be committed, even that is not economical (Boolean). false Y Provides spinning reserves? If true , this generator may provide spinning reserves (Boolean). true Y Production costs and limits Production costs are represented as piecewise-linear curves. Figure 1 shows an example cost curve with three segments, where it costs 1400, 1600, 2200 and 2400 dollars to generate, respectively, 100, 110, 130 and 135 MW of power. To model this generator, Production cost curve (MW) should be set to [100, 110, 130, 135] , and Production cost curve ($) should be set to [1400, 1600, 2200, 2400] . Note that this curve also specifies the production limits. Specifically, the first point identifies the minimum power output when the unit is operational, while the last point identifies the maximum power output. Figure 1. Piecewise-linear production cost curve. Additional remarks: For time-dependent production limits or time-dependent production costs, the usage of nested arrays is allowed. For example, if Production cost curve (MW) is set to [5.0, [10.0, 12.0, 15.0, 20.0]] , then the unit may generate at most 10, 12, 15 and 20 MW of power during time periods 1, 2, 3 and 4, respectively. The minimum output for all time periods is fixed to at 5 MW. There is no limit to the number of piecewise-linear segments, and different generators may have a different number of segments. If Production cost curve (MW) and Production cost curve ($) both contain a single element, then the generator must produce exactly that amount of power when operational. To specify that the generator may produce any amount of power up to a certain limit P , the parameter Production cost curve (MW) should be set to [0, P] . Production cost curves must be convex. Example { \"Generators\": { \"gen1\": { \"Bus\": \"b1\", \"Production cost curve (MW)\": [100.0, 110.0, 130.0, 135.0], \"Production cost curve ($)\": [1400.0, 1600.0, 2200.0, 2400.0], \"Startup costs ($)\": [300.0, 400.0], \"Startup delays (h)\": [1, 4], \"Ramp up limit (MW)\": 232.68, \"Ramp down limit (MW)\": 232.68, \"Startup limit (MW)\": 232.68, \"Shutdown limit (MW)\": 232.68, \"Minimum downtime (h)\": 4, \"Minimum uptime (h)\": 4, \"Initial status (h)\": 12, \"Must run?\": false, \"Provides spinning reserves?\": true, }, \"gen2\": { \"Bus\": \"b5\", \"Production cost curve (MW)\": [0.0, [10.0, 8.0, 0.0, 3.0]], \"Production cost curve ($)\": [0.0, 0.0], \"Provides spinning reserves?\": true, } } } Price-sensitive loads This section describes components in the system which may increase or reduce their energy consumption according to the energy prices. Fixed loads (as described in the buses section) are always served, regardless of the price, unless there is significant congestion in the system or insufficient production capacity. Price-sensitive loads, on the other hand, are only served if it is economical to do so. Key Description Default Time series? Bus Bus where the load is located. Multiple price-sensitive loads may be placed at the same bus. Required N Revenue ($/MW) Revenue obtained for serving each MW of power to this load. Required Y Demand (MW) Maximum amount of power required by this load. Any amount lower than this may be served. Required Y Example { \"Price-sensitive loads\": { \"p1\": { \"Bus\": \"b3\", \"Revenue ($/MW)\": 23.0, \"Demand (MW)\": 50.0 } } } Transmission Lines This section describes the characteristics of transmission system, such as its topology and the susceptance of each transmission line. Key Description Default Time series? Source bus Identifier of the bus where the transmission line originates. Required N Target bus Identifier of the bus where the transmission line reaches. Required N Reactance (ohms) Reactance of the transmission line (in ohms). Required N Susceptance (S) Susceptance of the transmission line (in siemens). Required N Normal flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in its regular, fully-operational state. May be null is there is no limit. +inf Y Emergency flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in degraded state (for example, after the failure of another transmission line). +inf Y Flow limit penalty ($/MW) Penalty for violating the flow limits of the transmission line (in $/MW). This is charged per time period. For example, if there is a thermal violation of 1 MW for three time periods, three times this amount will be charged. 5000.0 Y Example { \"Transmission lines\": { \"l1\": { \"Source bus\": \"b1\", \"Target bus\": \"b2\", \"Reactance (ohms)\": 0.05917, \"Susceptance (S)\": 29.49686, \"Normal flow limit (MW)\": 15000.0, \"Emergency flow limit (MW)\": 20000.0, \"Flow limit penalty ($/MW)\": 5000.0 } } } Reserves This section describes the hourly amount of operating reserves required. Key Description Default Time series? Spinning (MW) Minimum amount of system-wide spinning reserves (in MW). Only generators which are online may provide this reserve. 0.0 Y Example { \"Reserves\": { \"Spinning (MW)\": [ 57.30552, 53.88429, 51.31838, 50.46307 ] } } Contingencies This section describes credible contingency scenarios in the optimization, such as the loss of a transmission line or generator. Key Description Default Affected generators List of generators affected by this contingency. May be omitted if no generators are affected. [] Affected lines List of transmission lines affected by this contingency. May be omitted if no lines are affected. [] Example { \"Contingencies\": { \"c1\": { \"Affected lines\": [\"l1\", \"l2\", \"l3\"], \"Affected generators\": [\"g1\"] }, \"c2\": { \"Affected lines\": [\"l4\"] }, } } Additional remarks Time series parameters Many numerical properties in the JSON file can be specified either as a single floating point number if they are time-independent, or as an array containing exactly T elements, where T is the length of the planning horizon, if they are time-dependent. For example, both formats below are valid when T=3 : { \"Load (MW)\": 800.0, \"Load (MW)\": [800.0, 850.0, 730.0] } Current limitations All reserves are system-wide (no zonal reserves) Network topology remains the same for all time periods Only N-1 transmission contingencies are supported. Generator contingencies are not supported.","title":"Data"},{"location":"format/#data-format","text":"Instances are specified by JSON files containing the following main sections: Parameters Buses Generators Price-sensitive loads Transmission lines Reserves Contingencies Each section is described in detail below. For a complete example, see case14.json .","title":"Data Format"},{"location":"format/#parameters","text":"This section describes system-wide parameters, such as power balance penalties, and optimization parameters, such as the length of the planning horizon. Key Description Default Time series? Time (h) Length of the planning horizon (in hours) Required N Power balance penalty ($/MW) Penalty for system-wide shortage or surplus in production (in $/MW). This is charged per time period. For example, if there is a shortage of 1 MW for three time periods, three times this amount will be charged. 1000.0 Y","title":"Parameters"},{"location":"format/#example","text":"{ \"Parameters\": { \"Time (h)\": 4, \"Power balance penalty ($/MW)\": 1000.0 } }","title":"Example"},{"location":"format/#buses","text":"This section describes the characteristics of each bus in the system. Key Description Default Time series? Load (MW) Fixed load connected to the bus (in MW). Required Y","title":"Buses"},{"location":"format/#example_1","text":"{ \"Buses\": { \"b1\": { \"Load (MW)\": 0.0 }, \"b2\": { \"Load (MW)\": [ 26.01527, 24.46212, 23.29725, 22.90897 ] } } }","title":"Example"},{"location":"format/#generators","text":"This section describes all generators in the system, including thermal units, renewable units and virtual units. Key Description Default Time series? Bus Identifier of the bus where this generator is located (string) Required N Production cost curve (MW) and Production cost curve ($) Parameters describing the piecewise-linear production costs. See below for more details. Required Y Startup costs ($) and Startup delays (h) Parameters describing how much it costs to start the generator after it has been shut down for a certain amount of time. If Startup costs ($) and Startup delays (h) are set to [300.0, 400.0] and [1, 4] , for example, and the generator is shut down at time t , then it costs 300 to start up the generator at times t+1 , t+2 or t+3 , and 400 to start the generator at time t+4 or any time after that. The number of startup cost points is unlimited, and may be different for each generator. Startup delays must be strictly increasing. [0.0] and [1] N Minimum uptime (h) Minimum amount of time the generator must stay operational after starting up (in hours). For example, if the generator starts up at time 1 and Minimum uptime (h) is set to 4, then the generator can only shut down at time 5. 1 N Minimum downtime (h) Minimum amount of time the generator must stay offline after shutting down (in hours). For example, if the generator shuts down at time 1 and Minimum downtime (h) is set to 4, then the generator can only start producing power again at time 5. 1 N Ramp up limit (MW) Maximum increase in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and if this parameter is set to 40 MW, then the generator will produce at most 140 MW at time 2. +inf N Ramp down limit (MW) Maximum decrease in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and this parameter is set to 40 MW, then the generator will produce at least 60 MW at time 2. +inf N Startup limit (MW) Maximum amount of power a generator can produce immediately after starting up (in MW). +inf N Shutdown limit (MW) Maximum amount of power a generator can produce immediately before shutting down (in MW). Specifically, the generator can only shut down at time t+1 if its production at time t is below this limit. +inf N Initial status (h) If set to a positive number, indicates the amount of time the generator has been on at the beginning of the simulation, and if set to a negative number, the amount of time the generator has been off. For example, if Initial status (h) is -2 , this means that the generator was off at simulation time -2 and -1 . The simulation starts at time 0 . Required N Initial power (MW) Amount of power the generator at time period -1 , immediately before the planning horizon starts. Required N Must run? If true , the generator should be committed, even that is not economical (Boolean). false Y Provides spinning reserves? If true , this generator may provide spinning reserves (Boolean). true Y","title":"Generators"},{"location":"format/#production-costs-and-limits","text":"Production costs are represented as piecewise-linear curves. Figure 1 shows an example cost curve with three segments, where it costs 1400, 1600, 2200 and 2400 dollars to generate, respectively, 100, 110, 130 and 135 MW of power. To model this generator, Production cost curve (MW) should be set to [100, 110, 130, 135] , and Production cost curve ($) should be set to [1400, 1600, 2200, 2400] . Note that this curve also specifies the production limits. Specifically, the first point identifies the minimum power output when the unit is operational, while the last point identifies the maximum power output. Figure 1. Piecewise-linear production cost curve. Additional remarks: For time-dependent production limits or time-dependent production costs, the usage of nested arrays is allowed. For example, if Production cost curve (MW) is set to [5.0, [10.0, 12.0, 15.0, 20.0]] , then the unit may generate at most 10, 12, 15 and 20 MW of power during time periods 1, 2, 3 and 4, respectively. The minimum output for all time periods is fixed to at 5 MW. There is no limit to the number of piecewise-linear segments, and different generators may have a different number of segments. If Production cost curve (MW) and Production cost curve ($) both contain a single element, then the generator must produce exactly that amount of power when operational. To specify that the generator may produce any amount of power up to a certain limit P , the parameter Production cost curve (MW) should be set to [0, P] . Production cost curves must be convex.","title":"Production costs and limits"},{"location":"format/#example_2","text":"{ \"Generators\": { \"gen1\": { \"Bus\": \"b1\", \"Production cost curve (MW)\": [100.0, 110.0, 130.0, 135.0], \"Production cost curve ($)\": [1400.0, 1600.0, 2200.0, 2400.0], \"Startup costs ($)\": [300.0, 400.0], \"Startup delays (h)\": [1, 4], \"Ramp up limit (MW)\": 232.68, \"Ramp down limit (MW)\": 232.68, \"Startup limit (MW)\": 232.68, \"Shutdown limit (MW)\": 232.68, \"Minimum downtime (h)\": 4, \"Minimum uptime (h)\": 4, \"Initial status (h)\": 12, \"Must run?\": false, \"Provides spinning reserves?\": true, }, \"gen2\": { \"Bus\": \"b5\", \"Production cost curve (MW)\": [0.0, [10.0, 8.0, 0.0, 3.0]], \"Production cost curve ($)\": [0.0, 0.0], \"Provides spinning reserves?\": true, } } }","title":"Example"},{"location":"format/#price-sensitive-loads","text":"This section describes components in the system which may increase or reduce their energy consumption according to the energy prices. Fixed loads (as described in the buses section) are always served, regardless of the price, unless there is significant congestion in the system or insufficient production capacity. Price-sensitive loads, on the other hand, are only served if it is economical to do so. Key Description Default Time series? Bus Bus where the load is located. Multiple price-sensitive loads may be placed at the same bus. Required N Revenue ($/MW) Revenue obtained for serving each MW of power to this load. Required Y Demand (MW) Maximum amount of power required by this load. Any amount lower than this may be served. Required Y","title":"Price-sensitive loads"},{"location":"format/#example_3","text":"{ \"Price-sensitive loads\": { \"p1\": { \"Bus\": \"b3\", \"Revenue ($/MW)\": 23.0, \"Demand (MW)\": 50.0 } } }","title":"Example"},{"location":"format/#transmission-lines","text":"This section describes the characteristics of transmission system, such as its topology and the susceptance of each transmission line. Key Description Default Time series? Source bus Identifier of the bus where the transmission line originates. Required N Target bus Identifier of the bus where the transmission line reaches. Required N Reactance (ohms) Reactance of the transmission line (in ohms). Required N Susceptance (S) Susceptance of the transmission line (in siemens). Required N Normal flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in its regular, fully-operational state. May be null is there is no limit. +inf Y Emergency flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in degraded state (for example, after the failure of another transmission line). +inf Y Flow limit penalty ($/MW) Penalty for violating the flow limits of the transmission line (in $/MW). This is charged per time period. For example, if there is a thermal violation of 1 MW for three time periods, three times this amount will be charged. 5000.0 Y","title":"Transmission Lines"},{"location":"format/#example_4","text":"{ \"Transmission lines\": { \"l1\": { \"Source bus\": \"b1\", \"Target bus\": \"b2\", \"Reactance (ohms)\": 0.05917, \"Susceptance (S)\": 29.49686, \"Normal flow limit (MW)\": 15000.0, \"Emergency flow limit (MW)\": 20000.0, \"Flow limit penalty ($/MW)\": 5000.0 } } }","title":"Example"},{"location":"format/#reserves","text":"This section describes the hourly amount of operating reserves required. Key Description Default Time series? Spinning (MW) Minimum amount of system-wide spinning reserves (in MW). Only generators which are online may provide this reserve. 0.0 Y","title":"Reserves"},{"location":"format/#example_5","text":"{ \"Reserves\": { \"Spinning (MW)\": [ 57.30552, 53.88429, 51.31838, 50.46307 ] } }","title":"Example"},{"location":"format/#contingencies","text":"This section describes credible contingency scenarios in the optimization, such as the loss of a transmission line or generator. Key Description Default Affected generators List of generators affected by this contingency. May be omitted if no generators are affected. [] Affected lines List of transmission lines affected by this contingency. May be omitted if no lines are affected. []","title":"Contingencies"},{"location":"format/#example_6","text":"{ \"Contingencies\": { \"c1\": { \"Affected lines\": [\"l1\", \"l2\", \"l3\"], \"Affected generators\": [\"g1\"] }, \"c2\": { \"Affected lines\": [\"l4\"] }, } }","title":"Example"},{"location":"format/#additional-remarks","text":"","title":"Additional remarks"},{"location":"format/#time-series-parameters","text":"Many numerical properties in the JSON file can be specified either as a single floating point number if they are time-independent, or as an array containing exactly T elements, where T is the length of the planning horizon, if they are time-dependent. For example, both formats below are valid when T=3 : { \"Load (MW)\": 800.0, \"Load (MW)\": [800.0, 850.0, 730.0] }","title":"Time series parameters"},{"location":"format/#current-limitations","text":"All reserves are system-wide (no zonal reserves) Network topology remains the same for all time periods Only N-1 transmission contingencies are supported. Generator contingencies are not supported.","title":"Current limitations"},{"location":"install/","text":"Installation Guide This package was tested and developed with Julia 1.4 . To install Julia, please follow the installation guide on their website . To install UnitCommitment.jl , run the Julia interpreter, type ] to open the package manager, then type: pkg> add https://github.com/ANL-CEEESA/UnitCommitment.jl.git To test that the package has been correctly installed, run: pkg> test UnitCommitment If all tests pass, the package should now be ready to be used by any Julia script on the machine. To try it out in the julia interpreter hit backspace to return to the regular interpreter, and type the following command: using UnitCommitment","title":"Install"},{"location":"install/#installation-guide","text":"This package was tested and developed with Julia 1.4 . To install Julia, please follow the installation guide on their website . To install UnitCommitment.jl , run the Julia interpreter, type ] to open the package manager, then type: pkg> add https://github.com/ANL-CEEESA/UnitCommitment.jl.git To test that the package has been correctly installed, run: pkg> test UnitCommitment If all tests pass, the package should now be ready to be used by any Julia script on the machine. To try it out in the julia interpreter hit backspace to return to the regular interpreter, and type the following command: using UnitCommitment","title":"Installation Guide"},{"location":"isf/","text":"Linear Sensitivity Factors UnitCommitment.jl includes a number of functions to compute typical linear sensitivity factors, such as Injection Shift Factors and Line Outage Distribution Factors . These sensitivity factors can be used to quickly compute DC power flows in both base and N-1 contigency scenarios. Injection Shift Factors Given a network with B buses and L transmission lines, the Injection Shift Factors (ISF) matrix is an L -by- B matrix which indicates much power flows through a certain transmission line when 1 MW of power is injected at bus b and withdrawn from the slack bus. For example, isf[:l7, :b5] indicates the amount of power (in MW) that flows through line l7 when 1 MW of power is injected at bus b5 and withdrawn from the slack bus. This matrix is computed based on the DC linearization of power flow equations and does not include losses. To compute the ISF matrix, the function injection_shift_factors can be used. It is necessary to specify the set of lines, buses and the slack bus: using UnitCommitment instance = UnitCommitment.load(\"ieee_rts/case14\") isf = UnitCommitment.injection_shift_factors(lines = instance.lines, buses = instance.buses, slack = :b14) @show isf[:l7, :b5]","title":"Isf"},{"location":"isf/#linear-sensitivity-factors","text":"UnitCommitment.jl includes a number of functions to compute typical linear sensitivity factors, such as Injection Shift Factors and Line Outage Distribution Factors . These sensitivity factors can be used to quickly compute DC power flows in both base and N-1 contigency scenarios.","title":"Linear Sensitivity Factors"},{"location":"isf/#injection-shift-factors","text":"Given a network with B buses and L transmission lines, the Injection Shift Factors (ISF) matrix is an L -by- B matrix which indicates much power flows through a certain transmission line when 1 MW of power is injected at bus b and withdrawn from the slack bus. For example, isf[:l7, :b5] indicates the amount of power (in MW) that flows through line l7 when 1 MW of power is injected at bus b5 and withdrawn from the slack bus. This matrix is computed based on the DC linearization of power flow equations and does not include losses. To compute the ISF matrix, the function injection_shift_factors can be used. It is necessary to specify the set of lines, buses and the slack bus: using UnitCommitment instance = UnitCommitment.load(\"ieee_rts/case14\") isf = UnitCommitment.injection_shift_factors(lines = instance.lines, buses = instance.buses, slack = :b14) @show isf[:l7, :b5]","title":"Injection Shift Factors"},{"location":"model/","text":"Benchmark Model UnitCommitment.jl includes a reference Mixed-Integer Linear Programming (MILP), built with JuMP , which can either be used as-is to solve instances of the problem, or be extended to build more complex formulations. Building and Solving the Model Given an instance and a JuMP optimizer, the function build_model can be used to build the reference MILP model. For example: using UnitCommitment, JuMP, Cbc instance = UnitCommitment.load(\"ieee_rts/case118\") model = build_model(instance, with_optimizer(Cbc.Optimizer)) The model enforces all unit constraints described in Unit Commitment Instances , including ramping, minimum-up and minimum-down times. Some system-wide constraints, such as spinning reserves, are also enforced. The model, however, does not enforce transmission or N-1 security constraints, since these are typically generated on-the-fly. A reference to the JuMP model is stored at model.mip . After constructed, the model can be optimized as follows: optimize!(model.mip) Decision Variables References to all decision variables are stored at model.vars . A complete list of available decision variables is as follows: Variable Description model.vars.production[gi,t] Amount of power (in MW) produced by unit with index gi at time t . model.vars.reserve[gi,t] Amount of spinning reserves (in MW) provided by unit with index gi at time t . model.vars.is_on[gi,t] Binary variable indicating if unit with index gi is operational at time t . model.vars.switch_on[gi,t] Binary variable indicating if unit with index gi was switched on at time t . That is, the unit was not operational at time t-1 , but it is operational at time t . model.vars.switch_off[gi,t] Binary variable indicating if unit with index gi was switched off at time t . That is, the unit was operational at time t-1 , but it is no longer operational at time t . model.vars.unit_cost[gi,t] The total cost to operate unit with index gi at time t . Includes start-up costs, no-load costs and any other production costs. model.vars.cost[t] Total cost at time t . model.vars.net_injection[bi,t] Total net injection (in MW) at bus with index bi and time t . Net injection is defined as the total power being produced by units located at the bus minus the bus load. Accessing the Solution To access the value of a particular decision variable after the optimization is completed, the function JuMP.value(var) can be used. The following example prints the amount of power (in MW) produced by each unit at time 5: for g in instance.units @show value(model.vars.production[g.index, 5]) end Modifying the Model Prior to being solved, the reference model can be modified by using the variable references above and conventional JuMP macros. For example, the following code can be used to ensure that at most 10 units are operational at time 4: using UnitCommitment, JuMP, Cbc instance = UnitCommitment.load(\"ieee_rts/case118\") model = build_model(instance, with_optimizer(Cbc.Optimizer)) @contraint(model.mip, sum(model.vars.is_on[g.index, 4] for g in instance.units) <= 10) optimize!(model.mip) It is not currently possible to modify the constraints included in the reference model. Reference @docs UnitCommitment.build_model","title":"Model"},{"location":"model/#benchmark-model","text":"UnitCommitment.jl includes a reference Mixed-Integer Linear Programming (MILP), built with JuMP , which can either be used as-is to solve instances of the problem, or be extended to build more complex formulations.","title":"Benchmark Model"},{"location":"model/#building-and-solving-the-model","text":"Given an instance and a JuMP optimizer, the function build_model can be used to build the reference MILP model. For example: using UnitCommitment, JuMP, Cbc instance = UnitCommitment.load(\"ieee_rts/case118\") model = build_model(instance, with_optimizer(Cbc.Optimizer)) The model enforces all unit constraints described in Unit Commitment Instances , including ramping, minimum-up and minimum-down times. Some system-wide constraints, such as spinning reserves, are also enforced. The model, however, does not enforce transmission or N-1 security constraints, since these are typically generated on-the-fly. A reference to the JuMP model is stored at model.mip . After constructed, the model can be optimized as follows: optimize!(model.mip)","title":"Building and Solving the Model"},{"location":"model/#decision-variables","text":"References to all decision variables are stored at model.vars . A complete list of available decision variables is as follows: Variable Description model.vars.production[gi,t] Amount of power (in MW) produced by unit with index gi at time t . model.vars.reserve[gi,t] Amount of spinning reserves (in MW) provided by unit with index gi at time t . model.vars.is_on[gi,t] Binary variable indicating if unit with index gi is operational at time t . model.vars.switch_on[gi,t] Binary variable indicating if unit with index gi was switched on at time t . That is, the unit was not operational at time t-1 , but it is operational at time t . model.vars.switch_off[gi,t] Binary variable indicating if unit with index gi was switched off at time t . That is, the unit was operational at time t-1 , but it is no longer operational at time t . model.vars.unit_cost[gi,t] The total cost to operate unit with index gi at time t . Includes start-up costs, no-load costs and any other production costs. model.vars.cost[t] Total cost at time t . model.vars.net_injection[bi,t] Total net injection (in MW) at bus with index bi and time t . Net injection is defined as the total power being produced by units located at the bus minus the bus load.","title":"Decision Variables"},{"location":"model/#accessing-the-solution","text":"To access the value of a particular decision variable after the optimization is completed, the function JuMP.value(var) can be used. The following example prints the amount of power (in MW) produced by each unit at time 5: for g in instance.units @show value(model.vars.production[g.index, 5]) end","title":"Accessing the Solution"},{"location":"model/#modifying-the-model","text":"Prior to being solved, the reference model can be modified by using the variable references above and conventional JuMP macros. For example, the following code can be used to ensure that at most 10 units are operational at time 4: using UnitCommitment, JuMP, Cbc instance = UnitCommitment.load(\"ieee_rts/case118\") model = build_model(instance, with_optimizer(Cbc.Optimizer)) @contraint(model.mip, sum(model.vars.is_on[g.index, 4] for g in instance.units) <= 10) optimize!(model.mip) It is not currently possible to modify the constraints included in the reference model.","title":"Modifying the Model"},{"location":"model/#reference","text":"@docs UnitCommitment.build_model","title":"Reference"},{"location":"solvers/","text":"Benchmark Solver Solving an instance of the Unit Commitment problem typically involves more than simply building a Mixed-Integer Linear Programming and handing it over to the solver. Since the number of transmission and N-1 security constraints can easily exceed hundreds of millions for large instances of the problem, it is often necessary to iterate between MILP optimization and contingency screening, so that only necessary transmission constraints are added to the MILP. UnitCommitment.jl includes a fast implementation of the contingency screening method described in [1] , which is able to efficiently handle even ISO-scale instances of the problem. The method makes use of Injection Shift Factors (ISFs) and Line Outage Distribution Factors (LODFs) to model DC power flows and N-1 contingencies. If Julia is configured to use multiple threads (through the environment variable JULIA_NUM_THREADS ) then multiple contingency scenarios are evaluated in parallel. Usage To solve one of the benchmark instances using the included benchmark solver, use the method UnitCommitment.solve as shown in the example below. julia> UnitCommitment.solve(\"ieee_rts/case118\") [ Info: Loading instance: ieee_rts/case118 [ Info: 54 units [ Info: 118 buses [ Info: 186 lines [ Info: Scaling problem (0.6 demands, 1.0 limits)... [ Info: Using Cbc as MILP solver (0.001 gap, 4 threads) [ Info: Computing sensitivity factors (0.001 ISF cutoff, 0.0001 LODF cutoff)... [ Info: Building MILP model (24 hours, 0.01 reserve)... [ Info: Optimizing... [ Info: Optimal value: 4.033106e+06 [ Info: Solved in 8.73 seconds With default settings, the solver does not consider any transmission or security constraints, and the peak load is automatically set to 60% of the installed capacity of the system. These, and many other settings, can be configured using keyword arguments. See the reference section below for more details. Sample usage: julia> UnitCommitment.solve(\"ieee_rts/case118\", demand_scale=0.7, security=true) [ Info: Loading instance: ieee_rts/case118 [ Info: 54 units [ Info: 118 buses [ Info: 186 lines [ Info: Scaling problem (0.7 demands, 1.0 limits)... [ Info: Using Cbc as MILP solver (0.001 gap, 4 threads) [ Info: Computing sensitivity factors (0.001 ISF cutoff, 0.0001 LODF cutoff)... [ Info: Building MILP model (24 hours, 0.01 reserve)... [ Info: Optimizing... [ Info: Verifying flow constraints... [ Info: Optimal value: 4.888740e+06 [ Info: Solved in 4.50 seconds When transmission or N-1 security constraints are activated, the solver uses an iterative method to lazily enforce them. See this paper for a detailed description of the method. Injection Shift Factors (ISF) and Line Outage Distribution Factors (LODF) are used for the computation of DC power flows. Note Many of the benchmark instances were not originally designed for N-1 security-constrained studies, and may become infeasible if these constraints are enforced. To avoid infeasibilities, the transmission limits can be increased through the keyword argument limit_scale . By default, the MILP is solved using Cbc, the COIN-OR Branch and Cut solver . If UnitCommitment is loaded after either CPLEX or SCIP , then these solvers will be used instead. A detailed solver log can be displayed by setting verbose=true . Reference @docs UnitCommitment.solve","title":"Solvers"},{"location":"solvers/#benchmark-solver","text":"Solving an instance of the Unit Commitment problem typically involves more than simply building a Mixed-Integer Linear Programming and handing it over to the solver. Since the number of transmission and N-1 security constraints can easily exceed hundreds of millions for large instances of the problem, it is often necessary to iterate between MILP optimization and contingency screening, so that only necessary transmission constraints are added to the MILP. UnitCommitment.jl includes a fast implementation of the contingency screening method described in [1] , which is able to efficiently handle even ISO-scale instances of the problem. The method makes use of Injection Shift Factors (ISFs) and Line Outage Distribution Factors (LODFs) to model DC power flows and N-1 contingencies. If Julia is configured to use multiple threads (through the environment variable JULIA_NUM_THREADS ) then multiple contingency scenarios are evaluated in parallel.","title":"Benchmark Solver"},{"location":"solvers/#usage","text":"To solve one of the benchmark instances using the included benchmark solver, use the method UnitCommitment.solve as shown in the example below. julia> UnitCommitment.solve(\"ieee_rts/case118\") [ Info: Loading instance: ieee_rts/case118 [ Info: 54 units [ Info: 118 buses [ Info: 186 lines [ Info: Scaling problem (0.6 demands, 1.0 limits)... [ Info: Using Cbc as MILP solver (0.001 gap, 4 threads) [ Info: Computing sensitivity factors (0.001 ISF cutoff, 0.0001 LODF cutoff)... [ Info: Building MILP model (24 hours, 0.01 reserve)... [ Info: Optimizing... [ Info: Optimal value: 4.033106e+06 [ Info: Solved in 8.73 seconds With default settings, the solver does not consider any transmission or security constraints, and the peak load is automatically set to 60% of the installed capacity of the system. These, and many other settings, can be configured using keyword arguments. See the reference section below for more details. Sample usage: julia> UnitCommitment.solve(\"ieee_rts/case118\", demand_scale=0.7, security=true) [ Info: Loading instance: ieee_rts/case118 [ Info: 54 units [ Info: 118 buses [ Info: 186 lines [ Info: Scaling problem (0.7 demands, 1.0 limits)... [ Info: Using Cbc as MILP solver (0.001 gap, 4 threads) [ Info: Computing sensitivity factors (0.001 ISF cutoff, 0.0001 LODF cutoff)... [ Info: Building MILP model (24 hours, 0.01 reserve)... [ Info: Optimizing... [ Info: Verifying flow constraints... [ Info: Optimal value: 4.888740e+06 [ Info: Solved in 4.50 seconds When transmission or N-1 security constraints are activated, the solver uses an iterative method to lazily enforce them. See this paper for a detailed description of the method. Injection Shift Factors (ISF) and Line Outage Distribution Factors (LODF) are used for the computation of DC power flows. Note Many of the benchmark instances were not originally designed for N-1 security-constrained studies, and may become infeasible if these constraints are enforced. To avoid infeasibilities, the transmission limits can be increased through the keyword argument limit_scale . By default, the MILP is solved using Cbc, the COIN-OR Branch and Cut solver . If UnitCommitment is loaded after either CPLEX or SCIP , then these solvers will be used instead. A detailed solver log can be displayed by setting verbose=true .","title":"Usage"},{"location":"solvers/#reference","text":"@docs UnitCommitment.solve","title":"Reference"}]}