{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UnitCommitment.jl UnitCommitment.jl (UC.jl) is a Julia optimization package for the Security-Constrained Unit Commitment Problem (SCUC), a fundamental optimization problem in power systems used, for example, to clear the day-ahead electricity markets. The package provides benchmark instances for the problem and Julia/JuMP implementations of state-of-the-art mixed-integer programming formulations. Package Components Data Format: The package proposes an extensible and fully-documented JSON-based data specification format for SCUC, developed in collaboration with Independent System Operators (ISOs), which describes the most important aspects of the problem. The format supports all the most common generator characteristics (including ramping, piecewise-linear production cost curves and time-dependent startup costs), as well as operating reserves, price-sensitive loads, transmission networks and contingencies. Benchmark Instances: The package provides a diverse collection of large-scale benchmark instances collected from the literature and extended to make them more challenging and realistic. Model Implementation : The package provides a Julia/JuMP implementation of state-of-the-art formulations and solution methods for SCUC. Our goal is to keep this implementation up-to-date, as new methods are proposed in the literature. Benchmark Tools: The package provides automated benchmark scripts to accurately evaluate the performance impact of proposed code changes. Documentation Usage Data Format Instances Source code https://github.com/ANL-CEEESA/unitcommitment.jl Authors Alinson Santos Xavier (Argonne National Laboratory) Feng Qiu (Argonne National Laboratory) Acknowledgments We would like to thank Aleksandr M. Kazachkov (University of Florida), Yonghong Chen (Midcontinent Independent System Operator), Feng Pan (Pacific Northwest National Laboratory) for valuable feedback on early versions of this package. Based upon work supported by Laboratory Directed Research and Development (LDRD) funding from Argonne National Laboratory, provided by the Director, Office of Science, of the U.S. Department of Energy under Contract No. DE-AC02-06CH11357. Citing If you use UnitCommitment.jl in your research, we request that you cite the package as follows: Alinson S. Xavier, Feng Qiu, \"UnitCommitment.jl: A Julia/JuMP Optimization Package for Security-Constrained Unit Commitment\". Zenodo (2020). DOI: 10.5281/zenodo.4269874 . If you make use of the provided instances files, we request that you additionally cite the original sources, as described in the instances page . License Released under the modified BSD license. See LICENSE.md for more details.","title":"Home"},{"location":"#unitcommitmentjl","text":"UnitCommitment.jl (UC.jl) is a Julia optimization package for the Security-Constrained Unit Commitment Problem (SCUC), a fundamental optimization problem in power systems used, for example, to clear the day-ahead electricity markets. The package provides benchmark instances for the problem and Julia/JuMP implementations of state-of-the-art mixed-integer programming formulations.","title":"UnitCommitment.jl"},{"location":"#package-components","text":"Data Format: The package proposes an extensible and fully-documented JSON-based data specification format for SCUC, developed in collaboration with Independent System Operators (ISOs), which describes the most important aspects of the problem. The format supports all the most common generator characteristics (including ramping, piecewise-linear production cost curves and time-dependent startup costs), as well as operating reserves, price-sensitive loads, transmission networks and contingencies. Benchmark Instances: The package provides a diverse collection of large-scale benchmark instances collected from the literature and extended to make them more challenging and realistic. Model Implementation : The package provides a Julia/JuMP implementation of state-of-the-art formulations and solution methods for SCUC. Our goal is to keep this implementation up-to-date, as new methods are proposed in the literature. Benchmark Tools: The package provides automated benchmark scripts to accurately evaluate the performance impact of proposed code changes.","title":"Package Components"},{"location":"#documentation","text":"Usage Data Format Instances","title":"Documentation"},{"location":"#source-code","text":"https://github.com/ANL-CEEESA/unitcommitment.jl","title":"Source code"},{"location":"#authors","text":"Alinson Santos Xavier (Argonne National Laboratory) Feng Qiu (Argonne National Laboratory)","title":"Authors"},{"location":"#acknowledgments","text":"We would like to thank Aleksandr M. Kazachkov (University of Florida), Yonghong Chen (Midcontinent Independent System Operator), Feng Pan (Pacific Northwest National Laboratory) for valuable feedback on early versions of this package. Based upon work supported by Laboratory Directed Research and Development (LDRD) funding from Argonne National Laboratory, provided by the Director, Office of Science, of the U.S. Department of Energy under Contract No. DE-AC02-06CH11357.","title":"Acknowledgments"},{"location":"#citing","text":"If you use UnitCommitment.jl in your research, we request that you cite the package as follows: Alinson S. Xavier, Feng Qiu, \"UnitCommitment.jl: A Julia/JuMP Optimization Package for Security-Constrained Unit Commitment\". Zenodo (2020). DOI: 10.5281/zenodo.4269874 . If you make use of the provided instances files, we request that you additionally cite the original sources, as described in the instances page .","title":"Citing"},{"location":"#license","text":"Released under the modified BSD license. See LICENSE.md for more details.","title":"License"},{"location":"format/","text":"Data Format 1. Input Data Format Instances are specified by JSON files containing the following main sections: Parameters Buses Generators Price-sensitive loads Transmission lines Reserves Contingencies Each section is described in detail below. For a complete example, see case14 . 1.1 Parameters This section describes system-wide parameters, such as power balance penalties, and optimization parameters, such as the length of the planning horizon. Key Description Default Time series? Time (h) Length of the planning horizon (in hours) Required N Power balance penalty ($/MW) Penalty for system-wide shortage or surplus in production (in $/MW). This is charged per time period. For example, if there is a shortage of 1 MW for three time periods, three times this amount will be charged. 1000.0 Y Example { \"Parameters\": { \"Time (h)\": 4, \"Power balance penalty ($/MW)\": 1000.0 } } 1.2 Buses This section describes the characteristics of each bus in the system. Key Description Default Time series? Load (MW) Fixed load connected to the bus (in MW). Required Y Example { \"Buses\": { \"b1\": { \"Load (MW)\": 0.0 }, \"b2\": { \"Load (MW)\": [ 26.01527, 24.46212, 23.29725, 22.90897 ] } } } 1.3 Generators This section describes all generators in the system, including thermal units, renewable units and virtual units. Key Description Default Time series? Bus Identifier of the bus where this generator is located (string) Required N Production cost curve (MW) and Production cost curve ($) Parameters describing the piecewise-linear production costs. See below for more details. Required Y Startup costs ($) and Startup delays (h) Parameters describing how much it costs to start the generator after it has been shut down for a certain amount of time. If Startup costs ($) and Startup delays (h) are set to [300.0, 400.0] and [1, 4] , for example, and the generator is shut down at time t , then it costs 300 to start up the generator at times t+1 , t+2 or t+3 , and 400 to start the generator at time t+4 or any time after that. The number of startup cost points is unlimited, and may be different for each generator. Startup delays must be strictly increasing. [0.0] and [1] N Minimum uptime (h) Minimum amount of time the generator must stay operational after starting up (in hours). For example, if the generator starts up at time 1 and Minimum uptime (h) is set to 4, then the generator can only shut down at time 5. 1 N Minimum downtime (h) Minimum amount of time the generator must stay offline after shutting down (in hours). For example, if the generator shuts down at time 1 and Minimum downtime (h) is set to 4, then the generator can only start producing power again at time 5. 1 N Ramp up limit (MW) Maximum increase in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and if this parameter is set to 40 MW, then the generator will produce at most 140 MW at time 2. +inf N Ramp down limit (MW) Maximum decrease in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and this parameter is set to 40 MW, then the generator will produce at least 60 MW at time 2. +inf N Startup limit (MW) Maximum amount of power a generator can produce immediately after starting up (in MW). +inf N Shutdown limit (MW) Maximum amount of power a generator can produce immediately before shutting down (in MW). Specifically, the generator can only shut down at time t+1 if its production at time t is below this limit. +inf N Initial status (h) If set to a positive number, indicates the amount of time the generator has been on at the beginning of the simulation, and if set to a negative number, the amount of time the generator has been off. For example, if Initial status (h) is -2 , this means that the generator was off at simulation time -2 and -1 . The simulation starts at time 0 . Required N Initial power (MW) Amount of power the generator at time period -1 , immediately before the planning horizon starts. Required N Must run? If true , the generator should be committed, even that is not economical (Boolean). false Y Provides spinning reserves? If true , this generator may provide spinning reserves (Boolean). true Y Production costs and limits Production costs are represented as piecewise-linear curves. Figure 1 shows an example cost curve with three segments, where it costs 1400, 1600, 2200 and 2400 dollars to generate, respectively, 100, 110, 130 and 135 MW of power. To model this generator, Production cost curve (MW) should be set to [100, 110, 130, 135] , and Production cost curve ($) should be set to [1400, 1600, 2200, 2400] . Note that this curve also specifies the production limits. Specifically, the first point identifies the minimum power output when the unit is operational, while the last point identifies the maximum power output. Figure 1. Piecewise-linear production cost curve. Additional remarks: For time-dependent production limits or time-dependent production costs, the usage of nested arrays is allowed. For example, if Production cost curve (MW) is set to [5.0, [10.0, 12.0, 15.0, 20.0]] , then the unit may generate at most 10, 12, 15 and 20 MW of power during time periods 1, 2, 3 and 4, respectively. The minimum output for all time periods is fixed to at 5 MW. There is no limit to the number of piecewise-linear segments, and different generators may have a different number of segments. If Production cost curve (MW) and Production cost curve ($) both contain a single element, then the generator must produce exactly that amount of power when operational. To specify that the generator may produce any amount of power up to a certain limit P , the parameter Production cost curve (MW) should be set to [0, P] . Production cost curves must be convex. Example { \"Generators\": { \"gen1\": { \"Bus\": \"b1\", \"Production cost curve (MW)\": [100.0, 110.0, 130.0, 135.0], \"Production cost curve ($)\": [1400.0, 1600.0, 2200.0, 2400.0], \"Startup costs ($)\": [300.0, 400.0], \"Startup delays (h)\": [1, 4], \"Ramp up limit (MW)\": 232.68, \"Ramp down limit (MW)\": 232.68, \"Startup limit (MW)\": 232.68, \"Shutdown limit (MW)\": 232.68, \"Minimum downtime (h)\": 4, \"Minimum uptime (h)\": 4, \"Initial status (h)\": 12, \"Must run?\": false, \"Provides spinning reserves?\": true, }, \"gen2\": { \"Bus\": \"b5\", \"Production cost curve (MW)\": [0.0, [10.0, 8.0, 0.0, 3.0]], \"Production cost curve ($)\": [0.0, 0.0], \"Provides spinning reserves?\": true, } } } 1.4 Price-sensitive loads This section describes components in the system which may increase or reduce their energy consumption according to the energy prices. Fixed loads (as described in the buses section) are always served, regardless of the price, unless there is significant congestion in the system or insufficient production capacity. Price-sensitive loads, on the other hand, are only served if it is economical to do so. Key Description Default Time series? Bus Bus where the load is located. Multiple price-sensitive loads may be placed at the same bus. Required N Revenue ($/MW) Revenue obtained for serving each MW of power to this load. Required Y Demand (MW) Maximum amount of power required by this load. Any amount lower than this may be served. Required Y Example { \"Price-sensitive loads\": { \"p1\": { \"Bus\": \"b3\", \"Revenue ($/MW)\": 23.0, \"Demand (MW)\": 50.0 } } } 1.5 Transmission Lines This section describes the characteristics of transmission system, such as its topology and the susceptance of each transmission line. Key Description Default Time series? Source bus Identifier of the bus where the transmission line originates. Required N Target bus Identifier of the bus where the transmission line reaches. Required N Reactance (ohms) Reactance of the transmission line (in ohms). Required N Susceptance (S) Susceptance of the transmission line (in siemens). Required N Normal flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in its regular, fully-operational state. May be null is there is no limit. +inf Y Emergency flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in degraded state (for example, after the failure of another transmission line). +inf Y Flow limit penalty ($/MW) Penalty for violating the flow limits of the transmission line (in $/MW). This is charged per time period. For example, if there is a thermal violation of 1 MW for three time periods, three times this amount will be charged. 5000.0 Y Example { \"Transmission lines\": { \"l1\": { \"Source bus\": \"b1\", \"Target bus\": \"b2\", \"Reactance (ohms)\": 0.05917, \"Susceptance (S)\": 29.49686, \"Normal flow limit (MW)\": 15000.0, \"Emergency flow limit (MW)\": 20000.0, \"Flow limit penalty ($/MW)\": 5000.0 } } } 1.6 Reserves This section describes the hourly amount of operating reserves required. Key Description Default Time series? Spinning (MW) Minimum amount of system-wide spinning reserves (in MW). Only generators which are online may provide this reserve. 0.0 Y Example { \"Reserves\": { \"Spinning (MW)\": [ 57.30552, 53.88429, 51.31838, 50.46307 ] } } 1.7 Contingencies This section describes credible contingency scenarios in the optimization, such as the loss of a transmission line or generator. Key Description Default Affected generators List of generators affected by this contingency. May be omitted if no generators are affected. [] Affected lines List of transmission lines affected by this contingency. May be omitted if no lines are affected. [] Example { \"Contingencies\": { \"c1\": { \"Affected lines\": [\"l1\", \"l2\", \"l3\"], \"Affected generators\": [\"g1\"] }, \"c2\": { \"Affected lines\": [\"l4\"] }, } } 1.8 Additional remarks Time series parameters Many numerical properties in the JSON file can be specified either as a single floating point number if they are time-independent, or as an array containing exactly T elements, where T is the length of the planning horizon, if they are time-dependent. For example, both formats below are valid when T=3 : { \"Load (MW)\": 800.0, \"Load (MW)\": [800.0, 850.0, 730.0] } Current limitations All reserves are system-wide (no zonal reserves) Network topology remains the same for all time periods Only N-1 transmission contingencies are supported. Generator contingencies are not supported. Time-varying minimum production amounts are not currently compatible with ramp/startup/shutdown limits. 2. Output Data Format The output data format is also JSON-based, but it is not currently documented since we expect it to change significantly in a future version of the package.","title":"Format"},{"location":"format/#data-format","text":"","title":"Data Format"},{"location":"format/#1-input-data-format","text":"Instances are specified by JSON files containing the following main sections: Parameters Buses Generators Price-sensitive loads Transmission lines Reserves Contingencies Each section is described in detail below. For a complete example, see case14 .","title":"1. Input Data Format"},{"location":"format/#11-parameters","text":"This section describes system-wide parameters, such as power balance penalties, and optimization parameters, such as the length of the planning horizon. Key Description Default Time series? Time (h) Length of the planning horizon (in hours) Required N Power balance penalty ($/MW) Penalty for system-wide shortage or surplus in production (in $/MW). This is charged per time period. For example, if there is a shortage of 1 MW for three time periods, three times this amount will be charged. 1000.0 Y","title":"1.1 Parameters"},{"location":"format/#example","text":"{ \"Parameters\": { \"Time (h)\": 4, \"Power balance penalty ($/MW)\": 1000.0 } }","title":"Example"},{"location":"format/#12-buses","text":"This section describes the characteristics of each bus in the system. Key Description Default Time series? Load (MW) Fixed load connected to the bus (in MW). Required Y","title":"1.2 Buses"},{"location":"format/#example_1","text":"{ \"Buses\": { \"b1\": { \"Load (MW)\": 0.0 }, \"b2\": { \"Load (MW)\": [ 26.01527, 24.46212, 23.29725, 22.90897 ] } } }","title":"Example"},{"location":"format/#13-generators","text":"This section describes all generators in the system, including thermal units, renewable units and virtual units. Key Description Default Time series? Bus Identifier of the bus where this generator is located (string) Required N Production cost curve (MW) and Production cost curve ($) Parameters describing the piecewise-linear production costs. See below for more details. Required Y Startup costs ($) and Startup delays (h) Parameters describing how much it costs to start the generator after it has been shut down for a certain amount of time. If Startup costs ($) and Startup delays (h) are set to [300.0, 400.0] and [1, 4] , for example, and the generator is shut down at time t , then it costs 300 to start up the generator at times t+1 , t+2 or t+3 , and 400 to start the generator at time t+4 or any time after that. The number of startup cost points is unlimited, and may be different for each generator. Startup delays must be strictly increasing. [0.0] and [1] N Minimum uptime (h) Minimum amount of time the generator must stay operational after starting up (in hours). For example, if the generator starts up at time 1 and Minimum uptime (h) is set to 4, then the generator can only shut down at time 5. 1 N Minimum downtime (h) Minimum amount of time the generator must stay offline after shutting down (in hours). For example, if the generator shuts down at time 1 and Minimum downtime (h) is set to 4, then the generator can only start producing power again at time 5. 1 N Ramp up limit (MW) Maximum increase in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and if this parameter is set to 40 MW, then the generator will produce at most 140 MW at time 2. +inf N Ramp down limit (MW) Maximum decrease in production from one time period to the next (in MW). For example, if the generator is producing 100 MW at time 1 and this parameter is set to 40 MW, then the generator will produce at least 60 MW at time 2. +inf N Startup limit (MW) Maximum amount of power a generator can produce immediately after starting up (in MW). +inf N Shutdown limit (MW) Maximum amount of power a generator can produce immediately before shutting down (in MW). Specifically, the generator can only shut down at time t+1 if its production at time t is below this limit. +inf N Initial status (h) If set to a positive number, indicates the amount of time the generator has been on at the beginning of the simulation, and if set to a negative number, the amount of time the generator has been off. For example, if Initial status (h) is -2 , this means that the generator was off at simulation time -2 and -1 . The simulation starts at time 0 . Required N Initial power (MW) Amount of power the generator at time period -1 , immediately before the planning horizon starts. Required N Must run? If true , the generator should be committed, even that is not economical (Boolean). false Y Provides spinning reserves? If true , this generator may provide spinning reserves (Boolean). true Y","title":"1.3 Generators"},{"location":"format/#production-costs-and-limits","text":"Production costs are represented as piecewise-linear curves. Figure 1 shows an example cost curve with three segments, where it costs 1400, 1600, 2200 and 2400 dollars to generate, respectively, 100, 110, 130 and 135 MW of power. To model this generator, Production cost curve (MW) should be set to [100, 110, 130, 135] , and Production cost curve ($) should be set to [1400, 1600, 2200, 2400] . Note that this curve also specifies the production limits. Specifically, the first point identifies the minimum power output when the unit is operational, while the last point identifies the maximum power output. Figure 1. Piecewise-linear production cost curve.","title":"Production costs and limits"},{"location":"format/#additional-remarks","text":"For time-dependent production limits or time-dependent production costs, the usage of nested arrays is allowed. For example, if Production cost curve (MW) is set to [5.0, [10.0, 12.0, 15.0, 20.0]] , then the unit may generate at most 10, 12, 15 and 20 MW of power during time periods 1, 2, 3 and 4, respectively. The minimum output for all time periods is fixed to at 5 MW. There is no limit to the number of piecewise-linear segments, and different generators may have a different number of segments. If Production cost curve (MW) and Production cost curve ($) both contain a single element, then the generator must produce exactly that amount of power when operational. To specify that the generator may produce any amount of power up to a certain limit P , the parameter Production cost curve (MW) should be set to [0, P] . Production cost curves must be convex.","title":"Additional remarks:"},{"location":"format/#example_2","text":"{ \"Generators\": { \"gen1\": { \"Bus\": \"b1\", \"Production cost curve (MW)\": [100.0, 110.0, 130.0, 135.0], \"Production cost curve ($)\": [1400.0, 1600.0, 2200.0, 2400.0], \"Startup costs ($)\": [300.0, 400.0], \"Startup delays (h)\": [1, 4], \"Ramp up limit (MW)\": 232.68, \"Ramp down limit (MW)\": 232.68, \"Startup limit (MW)\": 232.68, \"Shutdown limit (MW)\": 232.68, \"Minimum downtime (h)\": 4, \"Minimum uptime (h)\": 4, \"Initial status (h)\": 12, \"Must run?\": false, \"Provides spinning reserves?\": true, }, \"gen2\": { \"Bus\": \"b5\", \"Production cost curve (MW)\": [0.0, [10.0, 8.0, 0.0, 3.0]], \"Production cost curve ($)\": [0.0, 0.0], \"Provides spinning reserves?\": true, } } }","title":"Example"},{"location":"format/#14-price-sensitive-loads","text":"This section describes components in the system which may increase or reduce their energy consumption according to the energy prices. Fixed loads (as described in the buses section) are always served, regardless of the price, unless there is significant congestion in the system or insufficient production capacity. Price-sensitive loads, on the other hand, are only served if it is economical to do so. Key Description Default Time series? Bus Bus where the load is located. Multiple price-sensitive loads may be placed at the same bus. Required N Revenue ($/MW) Revenue obtained for serving each MW of power to this load. Required Y Demand (MW) Maximum amount of power required by this load. Any amount lower than this may be served. Required Y","title":"1.4 Price-sensitive loads"},{"location":"format/#example_3","text":"{ \"Price-sensitive loads\": { \"p1\": { \"Bus\": \"b3\", \"Revenue ($/MW)\": 23.0, \"Demand (MW)\": 50.0 } } }","title":"Example"},{"location":"format/#15-transmission-lines","text":"This section describes the characteristics of transmission system, such as its topology and the susceptance of each transmission line. Key Description Default Time series? Source bus Identifier of the bus where the transmission line originates. Required N Target bus Identifier of the bus where the transmission line reaches. Required N Reactance (ohms) Reactance of the transmission line (in ohms). Required N Susceptance (S) Susceptance of the transmission line (in siemens). Required N Normal flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in its regular, fully-operational state. May be null is there is no limit. +inf Y Emergency flow limit (MW) Maximum amount of power (in MW) allowed to flow through the line when the system is in degraded state (for example, after the failure of another transmission line). +inf Y Flow limit penalty ($/MW) Penalty for violating the flow limits of the transmission line (in $/MW). This is charged per time period. For example, if there is a thermal violation of 1 MW for three time periods, three times this amount will be charged. 5000.0 Y","title":"1.5 Transmission Lines"},{"location":"format/#example_4","text":"{ \"Transmission lines\": { \"l1\": { \"Source bus\": \"b1\", \"Target bus\": \"b2\", \"Reactance (ohms)\": 0.05917, \"Susceptance (S)\": 29.49686, \"Normal flow limit (MW)\": 15000.0, \"Emergency flow limit (MW)\": 20000.0, \"Flow limit penalty ($/MW)\": 5000.0 } } }","title":"Example"},{"location":"format/#16-reserves","text":"This section describes the hourly amount of operating reserves required. Key Description Default Time series? Spinning (MW) Minimum amount of system-wide spinning reserves (in MW). Only generators which are online may provide this reserve. 0.0 Y","title":"1.6 Reserves"},{"location":"format/#example_5","text":"{ \"Reserves\": { \"Spinning (MW)\": [ 57.30552, 53.88429, 51.31838, 50.46307 ] } }","title":"Example"},{"location":"format/#17-contingencies","text":"This section describes credible contingency scenarios in the optimization, such as the loss of a transmission line or generator. Key Description Default Affected generators List of generators affected by this contingency. May be omitted if no generators are affected. [] Affected lines List of transmission lines affected by this contingency. May be omitted if no lines are affected. []","title":"1.7 Contingencies"},{"location":"format/#example_6","text":"{ \"Contingencies\": { \"c1\": { \"Affected lines\": [\"l1\", \"l2\", \"l3\"], \"Affected generators\": [\"g1\"] }, \"c2\": { \"Affected lines\": [\"l4\"] }, } }","title":"Example"},{"location":"format/#18-additional-remarks","text":"","title":"1.8 Additional remarks"},{"location":"format/#time-series-parameters","text":"Many numerical properties in the JSON file can be specified either as a single floating point number if they are time-independent, or as an array containing exactly T elements, where T is the length of the planning horizon, if they are time-dependent. For example, both formats below are valid when T=3 : { \"Load (MW)\": 800.0, \"Load (MW)\": [800.0, 850.0, 730.0] }","title":"Time series parameters"},{"location":"format/#current-limitations","text":"All reserves are system-wide (no zonal reserves) Network topology remains the same for all time periods Only N-1 transmission contingencies are supported. Generator contingencies are not supported. Time-varying minimum production amounts are not currently compatible with ramp/startup/shutdown limits.","title":"Current limitations"},{"location":"format/#2-output-data-format","text":"The output data format is also JSON-based, but it is not currently documented since we expect it to change significantly in a future version of the package.","title":"2. Output Data Format"},{"location":"instances/","text":"Instances UnitCommitment.jl provides a large collection of benchmark instances collected from the literature and converted to a common data format . In some cases, as indicated below, the original instances have been extended, with realistic parameters, using data-driven methods. If you use these instances in your research, we request that you cite UnitCommitment.jl, as well as the original sources. Raw instances files are available at our GitHub repository . Benchmark instances can also be loaded with UnitCommitment.read_benchmark(name) , as explained in the usage section . 1. MATPOWER MATPOWER is an open-source package for solving power flow problems in MATLAB and Octave. It contains a number of power flow test cases, which have been widely used in the power systems literature. Because most MATPOWER test cases were originally designed for power flow studies, they lack a number of important unit commitment parameters, such as time-varying loads, production cost curves, ramp limits, reserves and initial conditions. The test cases included in UnitCommitment.jl are extended versions of the original MATPOWER test cases, modified as following: Production cost curves were generated using a data-driven approach, based on publicly available data. More specifically, machine learning models were trained to predict typical production cost curves, for each day of the year, based on a generator's maximum and minimum power output. Load profiles were generated using a similar data-driven approach. Ramp-up, ramp-down, startup and shutdown rates were set to a fixed proportion of the generator's maximum output. Minimum reserves were set to a fixed proportion of the total demand. Contingencies were set to include all N-1 transmission line contingencies that do not generate islands or isolated buses. More specifically, there is one contingency for each transmission line, as long as that transmission line is not a bridge in the network graph. For each MATPOWER test case, UC.jl provides two variations ( 2017-02-01 and 2017-08-01 ) corresponding respectively to a winter and to a summer test case. 1.1 MATPOWER/UW-PSTCA A variety of smaller IEEE test cases, compiled by University of Washington , corresponding mostly to small portions of the American Electric Power System in the 1960s. Name Buses Generators Lines Contingencies References matpower/case14/2017-02-01 14 5 20 19 [MTPWR, PSTCA] matpower/case14/2017-08-01 14 5 20 19 [MTPWR, PSTCA] matpower/case30/2017-02-01 30 6 41 38 [MTPWR, PSTCA] matpower/case30/2017-08-01 30 6 41 38 [MTPWR, PSTCA] matpower/case57/2017-02-01 57 7 80 79 [MTPWR, PSTCA] matpower/case57/2017-08-01 57 7 80 79 [MTPWR, PSTCA] matpower/case118/2017-02-01 118 54 186 177 [MTPWR, PSTCA] matpower/case118/2017-08-01 118 54 186 177 [MTPWR, PSTCA] matpower/case300/2017-02-01 300 69 411 320 [MTPWR, PSTCA] matpower/case300/2017-08-01 300 69 411 320 [MTPWR, PSTCA] 1.2 MATPOWER/Polish Test cases based on the Polish 400, 220 and 110 kV networks, originally provided by Roman Korab (Politechnika \u015al\u0105ska) and corrected by the MATPOWER team. Name Buses Generators Lines Contingencies References matpower/case2383wp/2017-02-01 2383 323 2896 2240 [MTPWR] matpower/case2383wp/2017-08-01 2383 323 2896 2240 [MTPWR] matpower/case2736sp/2017-02-01 2736 289 3504 3159 [MTPWR] matpower/case2736sp/2017-08-01 2736 289 3504 3159 [MTPWR] matpower/case2737sop/2017-02-01 2737 267 3506 3161 [MTPWR] matpower/case2737sop/2017-08-01 2737 267 3506 3161 [MTPWR] matpower/case2746wop/2017-02-01 2746 443 3514 3155 [MTPWR] matpower/case2746wop/2017-08-01 2746 443 3514 3155 [MTPWR] matpower/case2746wp/2017-02-01 2746 457 3514 3156 [MTPWR] matpower/case2746wp/2017-08-01 2746 457 3514 3156 [MTPWR] matpower/case3012wp/2017-02-01 3012 496 3572 2854 [MTPWR] matpower/case3012wp/2017-08-01 3012 496 3572 2854 [MTPWR] matpower/case3120sp/2017-02-01 3120 483 3693 2950 [MTPWR] matpower/case3120sp/2017-08-01 3120 483 3693 2950 [MTPWR] matpower/case3375wp/2017-02-01 3374 590 4161 3245 [MTPWR] matpower/case3375wp/2017-08-01 3374 590 4161 3245 [MTPWR] 1.3 MATPOWER/PEGASE Test cases from the Pan European Grid Advanced Simulation and State Estimation (PEGASE) project , describing part of the European high voltage transmission network. Name Buses Generators Lines Contingencies References matpower/case89pegase/2017-02-01 89 12 210 192 [JoFlMa16, FlPaCa13, MTPWR] matpower/case89pegase/2017-08-01 89 12 210 192 [JoFlMa16, FlPaCa13, MTPWR] matpower/case1354pegase/2017-02-01 1354 260 1991 1288 [JoFlMa16, FlPaCa13, MTPWR] matpower/case1354pegase/2017-08-01 1354 260 1991 1288 [JoFlMa16, FlPaCa13, MTPWR] matpower/case2869pegase/2017-02-01 2869 510 4582 3579 [JoFlMa16, FlPaCa13, MTPWR] matpower/case2869pegase/2017-08-01 2869 510 4582 3579 [JoFlMa16, FlPaCa13, MTPWR] matpower/case9241pegase/2017-02-01 9241 1445 16049 13932 [JoFlMa16, FlPaCa13, MTPWR] matpower/case9241pegase/2017-08-01 9241 1445 16049 13932 [JoFlMa16, FlPaCa13, MTPWR] matpower/case13659pegase/2017-02-01 13659 4092 20467 13932 [JoFlMa16, FlPaCa13, MTPWR] matpower/case13659pegase/2017-08-01 13659 4092 20467 13932 [JoFlMa16, FlPaCa13, MTPWR] 1.4 MATPOWER/RTE Test cases from the R&D Division at Reseau de Transport d'Electricite representing the size and complexity of the French very high voltage transmission network. Name Buses Generators Lines Contingencies References matpower/case1888rte/2017-02-01 1888 296 2531 1484 [MTPWR, JoFlMa16] matpower/case1888rte/2017-08-01 1888 296 2531 1484 [MTPWR, JoFlMa16] matpower/case1951rte/2017-02-01 1951 390 2596 1497 [MTPWR, JoFlMa16] matpower/case1951rte/2017-08-01 1951 390 2596 1497 [MTPWR, JoFlMa16] matpower/case2848rte/2017-02-01 2848 544 3776 2242 [MTPWR, JoFlMa16] matpower/case2848rte/2017-08-01 2848 544 3776 2242 [MTPWR, JoFlMa16] matpower/case2868rte/2017-02-01 2868 596 3808 2260 [MTPWR, JoFlMa16] matpower/case2868rte/2017-08-01 2868 596 3808 2260 [MTPWR, JoFlMa16] matpower/case6468rte/2017-02-01 6468 1262 9000 6094 [MTPWR, JoFlMa16] matpower/case6468rte/2017-08-01 6468 1262 9000 6094 [MTPWR, JoFlMa16] matpower/case6470rte/2017-02-01 6470 1306 9005 6085 [MTPWR, JoFlMa16] matpower/case6470rte/2017-08-01 6470 1306 9005 6085 [MTPWR, JoFlMa16] matpower/case6495rte/2017-02-01 6495 1352 9019 6060 [MTPWR, JoFlMa16] matpower/case6495rte/2017-08-01 6495 1352 9019 6060 [MTPWR, JoFlMa16] matpower/case6515rte/2017-02-01 6515 1368 9037 6063 [MTPWR, JoFlMa16] matpower/case6515rte/2017-08-01 6515 1368 9037 6063 [MTPWR, JoFlMa16] 2. PGLIB-UC Instances PGLIB-UC is a benchmark library curated and maintained by the IEEE PES Task Force on Benchmarks for Validation of Emerging Power System Algorithms . These test cases have been used in [KnOsWa20]. 2.1 PGLIB-UC/California Test cases based on publicly available data from the California ISO. For more details, see PGLIB-UC case file overview . Name Buses Generators Lines Contingencies References pglib-uc/ca/2014-09-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-09-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-09-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-09-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_0 1 611 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_1 1 611 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_3 1 611 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_5 1 611 0 0 [KnOsWa20] 2.2 PGLIB-UC/FERC Test cases based on a publicly available unit commitment test case produced by the Federal Energy Regulatory Commission . For more details, see PGLIB-UC case file overview . Name Buses Generators Lines Contingencies References pglib-uc/ferc/2015-01-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-01-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-02-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-02-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-03-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-03-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-04-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-04-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-05-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-05-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-06-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-06-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-07-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-07-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-08-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-08-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-09-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-09-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-10-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-10-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-11-02_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-11-02_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-12-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-12-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] 2.3 PGLIB-UC/RTS-GMLC RTS-GMLC is an updated version of the RTS-96 test system produced by the United States Department of Energy's Grid Modernization Laboratory Consortium . The PGLIB-UC/RTS-GMLC instances are modified versions of the original RTS-GMLC instances, with modified ramp-rates and without a transmission network. For more details, see PGLIB-UC case file overview . Name Buses Generators Lines Contingencies References pglib-uc/rts_gmlc/2020-01-27 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-02-09 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-03-05 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-04-03 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-05-05 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-06-09 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-07-06 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-08-12 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-09-20 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-10-27 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-11-25 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-12-23 1 154 0 0 [BaBlEh19] 3. OR-LIB/UC OR-LIB is a collection of test data sets for a variety of operations research problems, including unit commitment. The UC instances in OR-LIB are synthetic instances generated by Antonio Frangioni's random UC generator . These test cases have been used in [FrGe06] and many other publications. Name Hours Buses Generators Lines Contingencies References or-lib/10_0_1_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_2_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_3_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_4_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_5_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/20_0_1_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_2_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_3_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_4_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_5_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/50_0_1_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_2_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_3_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_4_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_5_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/75_0_1_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_2_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_3_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_4_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_5_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/100_0_1_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_2_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_3_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_4_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_5_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/150_0_1_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_2_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_3_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_4_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_5_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/200_0_10_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_11_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_12_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_1_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_2_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_3_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_4_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_5_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_6_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_7_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_8_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_9_w 24 1 200 0 0 [ORLIB, FrGe06] 4. Tejada19 Test cases used in [TeLuSa19]. These instances are similar to OR-LIB/UC, in the sense that they have also been generated using Antonio Frangioni's random instance generator , but are much larger. Name Hours Buses Generators Lines Contingencies References tejada19/UC_24h_214g 24 1 214 0 0 [TeLuSa19] tejada19/UC_24h_250g 24 1 250 0 0 [TeLuSa19] tejada19/UC_24h_290g 24 1 290 0 0 [TeLuSa19] tejada19/UC_24h_480g 24 1 480 0 0 [TeLuSa19] tejada19/UC_24h_505g 24 1 505 0 0 [TeLuSa19] tejada19/UC_24h_623g 24 1 623 0 0 [TeLuSa19] tejada19/UC_24h_647g 24 1 647 0 0 [TeLuSa19] tejada19/UC_24h_836g 24 1 836 0 0 [TeLuSa19] tejada19/UC_24h_850g 24 1 850 0 0 [TeLuSa19] tejada19/UC_24h_918g 24 1 918 0 0 [TeLuSa19] tejada19/UC_24h_931g 24 1 931 0 0 [TeLuSa19] tejada19/UC_24h_940g 24 1 940 0 0 [TeLuSa19] tejada19/UC_24h_957g 24 1 957 0 0 [TeLuSa19] tejada19/UC_24h_959g 24 1 959 0 0 [TeLuSa19] tejada19/UC_24h_1069g 24 1 1069 0 0 [TeLuSa19] tejada19/UC_24h_1130g 24 1 1130 0 0 [TeLuSa19] tejada19/UC_24h_1376g 24 1 1376 0 0 [TeLuSa19] tejada19/UC_24h_1393g 24 1 1393 0 0 [TeLuSa19] tejada19/UC_24h_1577g 24 1 1577 0 0 [TeLuSa19] tejada19/UC_24h_1615g 24 1 1615 0 0 [TeLuSa19] tejada19/UC_24h_1632g 24 1 1632 0 0 [TeLuSa19] tejada19/UC_24h_1768g 24 1 1768 0 0 [TeLuSa19] tejada19/UC_24h_1804g 24 1 1804 0 0 [TeLuSa19] tejada19/UC_24h_1820g 24 1 1820 0 0 [TeLuSa19] tejada19/UC_24h_1823g 24 1 1823 0 0 [TeLuSa19] tejada19/UC_24h_1888g 24 1 1888 0 0 [TeLuSa19] tejada19/UC_168h_36g 168 1 36 0 0 [TeLuSa19] tejada19/UC_168h_38g 168 1 38 0 0 [TeLuSa19] tejada19/UC_168h_40g 168 1 40 0 0 [TeLuSa19] tejada19/UC_168h_53g 168 1 53 0 0 [TeLuSa19] tejada19/UC_168h_58g 168 1 58 0 0 [TeLuSa19] tejada19/UC_168h_59g 168 1 59 0 0 [TeLuSa19] tejada19/UC_168h_72g 168 1 72 0 0 [TeLuSa19] tejada19/UC_168h_84g 168 1 84 0 0 [TeLuSa19] tejada19/UC_168h_86g 168 1 86 0 0 [TeLuSa19] tejada19/UC_168h_88g 168 1 88 0 0 [TeLuSa19] tejada19/UC_168h_93g 168 1 93 0 0 [TeLuSa19] tejada19/UC_168h_105g 168 1 105 0 0 [TeLuSa19] tejada19/UC_168h_110g 168 1 110 0 0 [TeLuSa19] tejada19/UC_168h_125g 168 1 125 0 0 [TeLuSa19] tejada19/UC_168h_130g 168 1 130 0 0 [TeLuSa19] tejada19/UC_168h_131g 168 1 131 0 0 [TeLuSa19] tejada19/UC_168h_140g 168 1 140 0 0 [TeLuSa19] tejada19/UC_168h_165g 168 1 165 0 0 [TeLuSa19] tejada19/UC_168h_175g 168 1 175 0 0 [TeLuSa19] tejada19/UC_168h_179g 168 1 179 0 0 [TeLuSa19] tejada19/UC_168h_188g 168 1 188 0 0 [TeLuSa19] tejada19/UC_168h_192g 168 1 192 0 0 [TeLuSa19] tejada19/UC_168h_199g 168 1 199 0 0 [TeLuSa19] 5. References [UCJL] Alinson S. Xavier, Feng Qiu. \"UnitCommitment.jl: A Julia/JuMP Optimization Package for Security-Constrained Unit Commitment\". Zenodo (2020). DOI: 10.5281/zenodo.4269874 [KnOsWa20] Bernard Knueven, James Ostrowski and Jean-Paul Watson. \"On Mixed-Integer Programming Formulations for the Unit Commitment Problem\". INFORMS Journal on Computing (2020). DOI: 10.1287/ijoc.2019.0944 [KrHiOn12] Eric Krall, Michael Higgins and Richard P. O\u2019Neill. \"RTO unit commitment test system.\" Federal Energy Regulatory Commission. Available at: https://www.ferc.gov/industries-data/electric/power-sales-and-markets/increasing-efficiency-through-improved-software-1 (Accessed: Nov 14, 2020) [BaBlEh19] Clayton Barrows, Aaron Bloom, Ali Ehlen, Jussi Ikaheimo, Jennie Jorgenson, Dheepak Krishnamurthy, Jessica Lau et al. \"The IEEE Reliability Test System: A Proposed 2019 Update.\" IEEE Transactions on Power Systems (2019). DOI: 10.1109/TPWRS.2019.2925557 [JoFlMa16] C. Josz, S. Fliscounakis, J. Maeght, and P. Panciatici. \"AC Power Flow Data in MATPOWER and QCQP Format: iTesla, RTE Snapshots, and PEGASE\". ArXiv (2016) . [FlPaCa13] S. Fliscounakis, P. Panciatici, F. Capitanescu, and L. Wehenkel. \"Contingency ranking with respect to overloads in very large power systems taking into account uncertainty, preventive and corrective actions\", Power Systems, IEEE Trans. on, (28)4:4909-4917, 2013. DOI: 10.1109/TPWRS.2013.2251015 [MTPWR] D. Zimmerman, C. E. Murillo-Sandnchez and R. J. Thomas. \"Matpower: Steady-state operations, planning, and analysis tools forpower systems research and education\", IEEE Transactions on PowerSystems, vol. 26, no. 1, pp. 12 \u201319, Feb. 2011. DOI: 10.1109/TPWRS.2010.2051168 [PSTCA] University of Washington, Dept. of Electrical Engineering. \"Power Systems Test Case Archive\". Available at: http://www.ee.washington.edu/research/pstca/ (Accessed: Nov 14, 2020) [ORLIB] J.E.Beasley. \"OR-Library: distributing test problems by electronic mail\", Journal of the Operational Research Society 41(11) (1990). DOI: 10.2307/2582903 [FrGe06] A. Frangioni, C. Gentile. \"Solving nonlinear single-unit commitment problems with ramping constraints\" Operations Research 54(4), p. 767 - 775, 2006. DOI: 10.1287/opre.1060.0309 [TeLuSa19] D. A. Tejada-Arango, S. Lumbreras, P. Sanchez-Martin and A. Ramos. \"Which Unit-Commitment Formulation is Best? A Systematic Comparison,\" in IEEE Transactions on Power Systems. DOI: 10.1109/TPWRS.2019.2962024 .","title":"Instances"},{"location":"instances/#instances","text":"UnitCommitment.jl provides a large collection of benchmark instances collected from the literature and converted to a common data format . In some cases, as indicated below, the original instances have been extended, with realistic parameters, using data-driven methods. If you use these instances in your research, we request that you cite UnitCommitment.jl, as well as the original sources. Raw instances files are available at our GitHub repository . Benchmark instances can also be loaded with UnitCommitment.read_benchmark(name) , as explained in the usage section .","title":"Instances"},{"location":"instances/#1-matpower","text":"MATPOWER is an open-source package for solving power flow problems in MATLAB and Octave. It contains a number of power flow test cases, which have been widely used in the power systems literature. Because most MATPOWER test cases were originally designed for power flow studies, they lack a number of important unit commitment parameters, such as time-varying loads, production cost curves, ramp limits, reserves and initial conditions. The test cases included in UnitCommitment.jl are extended versions of the original MATPOWER test cases, modified as following: Production cost curves were generated using a data-driven approach, based on publicly available data. More specifically, machine learning models were trained to predict typical production cost curves, for each day of the year, based on a generator's maximum and minimum power output. Load profiles were generated using a similar data-driven approach. Ramp-up, ramp-down, startup and shutdown rates were set to a fixed proportion of the generator's maximum output. Minimum reserves were set to a fixed proportion of the total demand. Contingencies were set to include all N-1 transmission line contingencies that do not generate islands or isolated buses. More specifically, there is one contingency for each transmission line, as long as that transmission line is not a bridge in the network graph. For each MATPOWER test case, UC.jl provides two variations ( 2017-02-01 and 2017-08-01 ) corresponding respectively to a winter and to a summer test case.","title":"1. MATPOWER"},{"location":"instances/#11-matpoweruw-pstca","text":"A variety of smaller IEEE test cases, compiled by University of Washington , corresponding mostly to small portions of the American Electric Power System in the 1960s. Name Buses Generators Lines Contingencies References matpower/case14/2017-02-01 14 5 20 19 [MTPWR, PSTCA] matpower/case14/2017-08-01 14 5 20 19 [MTPWR, PSTCA] matpower/case30/2017-02-01 30 6 41 38 [MTPWR, PSTCA] matpower/case30/2017-08-01 30 6 41 38 [MTPWR, PSTCA] matpower/case57/2017-02-01 57 7 80 79 [MTPWR, PSTCA] matpower/case57/2017-08-01 57 7 80 79 [MTPWR, PSTCA] matpower/case118/2017-02-01 118 54 186 177 [MTPWR, PSTCA] matpower/case118/2017-08-01 118 54 186 177 [MTPWR, PSTCA] matpower/case300/2017-02-01 300 69 411 320 [MTPWR, PSTCA] matpower/case300/2017-08-01 300 69 411 320 [MTPWR, PSTCA]","title":"1.1 MATPOWER/UW-PSTCA"},{"location":"instances/#12-matpowerpolish","text":"Test cases based on the Polish 400, 220 and 110 kV networks, originally provided by Roman Korab (Politechnika \u015al\u0105ska) and corrected by the MATPOWER team. Name Buses Generators Lines Contingencies References matpower/case2383wp/2017-02-01 2383 323 2896 2240 [MTPWR] matpower/case2383wp/2017-08-01 2383 323 2896 2240 [MTPWR] matpower/case2736sp/2017-02-01 2736 289 3504 3159 [MTPWR] matpower/case2736sp/2017-08-01 2736 289 3504 3159 [MTPWR] matpower/case2737sop/2017-02-01 2737 267 3506 3161 [MTPWR] matpower/case2737sop/2017-08-01 2737 267 3506 3161 [MTPWR] matpower/case2746wop/2017-02-01 2746 443 3514 3155 [MTPWR] matpower/case2746wop/2017-08-01 2746 443 3514 3155 [MTPWR] matpower/case2746wp/2017-02-01 2746 457 3514 3156 [MTPWR] matpower/case2746wp/2017-08-01 2746 457 3514 3156 [MTPWR] matpower/case3012wp/2017-02-01 3012 496 3572 2854 [MTPWR] matpower/case3012wp/2017-08-01 3012 496 3572 2854 [MTPWR] matpower/case3120sp/2017-02-01 3120 483 3693 2950 [MTPWR] matpower/case3120sp/2017-08-01 3120 483 3693 2950 [MTPWR] matpower/case3375wp/2017-02-01 3374 590 4161 3245 [MTPWR] matpower/case3375wp/2017-08-01 3374 590 4161 3245 [MTPWR]","title":"1.2 MATPOWER/Polish"},{"location":"instances/#13-matpowerpegase","text":"Test cases from the Pan European Grid Advanced Simulation and State Estimation (PEGASE) project , describing part of the European high voltage transmission network. Name Buses Generators Lines Contingencies References matpower/case89pegase/2017-02-01 89 12 210 192 [JoFlMa16, FlPaCa13, MTPWR] matpower/case89pegase/2017-08-01 89 12 210 192 [JoFlMa16, FlPaCa13, MTPWR] matpower/case1354pegase/2017-02-01 1354 260 1991 1288 [JoFlMa16, FlPaCa13, MTPWR] matpower/case1354pegase/2017-08-01 1354 260 1991 1288 [JoFlMa16, FlPaCa13, MTPWR] matpower/case2869pegase/2017-02-01 2869 510 4582 3579 [JoFlMa16, FlPaCa13, MTPWR] matpower/case2869pegase/2017-08-01 2869 510 4582 3579 [JoFlMa16, FlPaCa13, MTPWR] matpower/case9241pegase/2017-02-01 9241 1445 16049 13932 [JoFlMa16, FlPaCa13, MTPWR] matpower/case9241pegase/2017-08-01 9241 1445 16049 13932 [JoFlMa16, FlPaCa13, MTPWR] matpower/case13659pegase/2017-02-01 13659 4092 20467 13932 [JoFlMa16, FlPaCa13, MTPWR] matpower/case13659pegase/2017-08-01 13659 4092 20467 13932 [JoFlMa16, FlPaCa13, MTPWR]","title":"1.3 MATPOWER/PEGASE"},{"location":"instances/#14-matpowerrte","text":"Test cases from the R&D Division at Reseau de Transport d'Electricite representing the size and complexity of the French very high voltage transmission network. Name Buses Generators Lines Contingencies References matpower/case1888rte/2017-02-01 1888 296 2531 1484 [MTPWR, JoFlMa16] matpower/case1888rte/2017-08-01 1888 296 2531 1484 [MTPWR, JoFlMa16] matpower/case1951rte/2017-02-01 1951 390 2596 1497 [MTPWR, JoFlMa16] matpower/case1951rte/2017-08-01 1951 390 2596 1497 [MTPWR, JoFlMa16] matpower/case2848rte/2017-02-01 2848 544 3776 2242 [MTPWR, JoFlMa16] matpower/case2848rte/2017-08-01 2848 544 3776 2242 [MTPWR, JoFlMa16] matpower/case2868rte/2017-02-01 2868 596 3808 2260 [MTPWR, JoFlMa16] matpower/case2868rte/2017-08-01 2868 596 3808 2260 [MTPWR, JoFlMa16] matpower/case6468rte/2017-02-01 6468 1262 9000 6094 [MTPWR, JoFlMa16] matpower/case6468rte/2017-08-01 6468 1262 9000 6094 [MTPWR, JoFlMa16] matpower/case6470rte/2017-02-01 6470 1306 9005 6085 [MTPWR, JoFlMa16] matpower/case6470rte/2017-08-01 6470 1306 9005 6085 [MTPWR, JoFlMa16] matpower/case6495rte/2017-02-01 6495 1352 9019 6060 [MTPWR, JoFlMa16] matpower/case6495rte/2017-08-01 6495 1352 9019 6060 [MTPWR, JoFlMa16] matpower/case6515rte/2017-02-01 6515 1368 9037 6063 [MTPWR, JoFlMa16] matpower/case6515rte/2017-08-01 6515 1368 9037 6063 [MTPWR, JoFlMa16]","title":"1.4 MATPOWER/RTE"},{"location":"instances/#2-pglib-uc-instances","text":"PGLIB-UC is a benchmark library curated and maintained by the IEEE PES Task Force on Benchmarks for Validation of Emerging Power System Algorithms . These test cases have been used in [KnOsWa20].","title":"2. PGLIB-UC Instances"},{"location":"instances/#21-pglib-uccalifornia","text":"Test cases based on publicly available data from the California ISO. For more details, see PGLIB-UC case file overview . Name Buses Generators Lines Contingencies References pglib-uc/ca/2014-09-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-09-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-09-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-09-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2014-12-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-03-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_0 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_1 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_3 1 610 0 0 [KnOsWa20] pglib-uc/ca/2015-06-01_reserves_5 1 610 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_0 1 611 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_1 1 611 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_3 1 611 0 0 [KnOsWa20] pglib-uc/ca/Scenario400_reserves_5 1 611 0 0 [KnOsWa20]","title":"2.1 PGLIB-UC/California"},{"location":"instances/#22-pglib-ucferc","text":"Test cases based on a publicly available unit commitment test case produced by the Federal Energy Regulatory Commission . For more details, see PGLIB-UC case file overview . Name Buses Generators Lines Contingencies References pglib-uc/ferc/2015-01-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-01-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-02-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-02-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-03-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-03-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-04-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-04-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-05-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-05-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-06-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-06-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-07-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-07-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-08-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-08-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-09-01_hw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-09-01_lw 1 979 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-10-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-10-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-11-02_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-11-02_lw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-12-01_hw 1 935 0 0 [KnOsWa20, KrHiOn12] pglib-uc/ferc/2015-12-01_lw 1 935 0 0 [KnOsWa20, KrHiOn12]","title":"2.2 PGLIB-UC/FERC"},{"location":"instances/#23-pglib-ucrts-gmlc","text":"RTS-GMLC is an updated version of the RTS-96 test system produced by the United States Department of Energy's Grid Modernization Laboratory Consortium . The PGLIB-UC/RTS-GMLC instances are modified versions of the original RTS-GMLC instances, with modified ramp-rates and without a transmission network. For more details, see PGLIB-UC case file overview . Name Buses Generators Lines Contingencies References pglib-uc/rts_gmlc/2020-01-27 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-02-09 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-03-05 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-04-03 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-05-05 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-06-09 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-07-06 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-08-12 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-09-20 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-10-27 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-11-25 1 154 0 0 [BaBlEh19] pglib-uc/rts_gmlc/2020-12-23 1 154 0 0 [BaBlEh19]","title":"2.3 PGLIB-UC/RTS-GMLC"},{"location":"instances/#3-or-libuc","text":"OR-LIB is a collection of test data sets for a variety of operations research problems, including unit commitment. The UC instances in OR-LIB are synthetic instances generated by Antonio Frangioni's random UC generator . These test cases have been used in [FrGe06] and many other publications. Name Hours Buses Generators Lines Contingencies References or-lib/10_0_1_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_2_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_3_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_4_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/10_0_5_w 24 1 10 0 0 [ORLIB, FrGe06] or-lib/20_0_1_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_2_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_3_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_4_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/20_0_5_w 24 1 20 0 0 [ORLIB, FrGe06] or-lib/50_0_1_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_2_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_3_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_4_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/50_0_5_w 24 1 50 0 0 [ORLIB, FrGe06] or-lib/75_0_1_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_2_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_3_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_4_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/75_0_5_w 24 1 75 0 0 [ORLIB, FrGe06] or-lib/100_0_1_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_2_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_3_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_4_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/100_0_5_w 24 1 100 0 0 [ORLIB, FrGe06] or-lib/150_0_1_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_2_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_3_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_4_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/150_0_5_w 24 1 150 0 0 [ORLIB, FrGe06] or-lib/200_0_10_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_11_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_12_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_1_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_2_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_3_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_4_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_5_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_6_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_7_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_8_w 24 1 200 0 0 [ORLIB, FrGe06] or-lib/200_0_9_w 24 1 200 0 0 [ORLIB, FrGe06]","title":"3. OR-LIB/UC"},{"location":"instances/#4-tejada19","text":"Test cases used in [TeLuSa19]. These instances are similar to OR-LIB/UC, in the sense that they have also been generated using Antonio Frangioni's random instance generator , but are much larger. Name Hours Buses Generators Lines Contingencies References tejada19/UC_24h_214g 24 1 214 0 0 [TeLuSa19] tejada19/UC_24h_250g 24 1 250 0 0 [TeLuSa19] tejada19/UC_24h_290g 24 1 290 0 0 [TeLuSa19] tejada19/UC_24h_480g 24 1 480 0 0 [TeLuSa19] tejada19/UC_24h_505g 24 1 505 0 0 [TeLuSa19] tejada19/UC_24h_623g 24 1 623 0 0 [TeLuSa19] tejada19/UC_24h_647g 24 1 647 0 0 [TeLuSa19] tejada19/UC_24h_836g 24 1 836 0 0 [TeLuSa19] tejada19/UC_24h_850g 24 1 850 0 0 [TeLuSa19] tejada19/UC_24h_918g 24 1 918 0 0 [TeLuSa19] tejada19/UC_24h_931g 24 1 931 0 0 [TeLuSa19] tejada19/UC_24h_940g 24 1 940 0 0 [TeLuSa19] tejada19/UC_24h_957g 24 1 957 0 0 [TeLuSa19] tejada19/UC_24h_959g 24 1 959 0 0 [TeLuSa19] tejada19/UC_24h_1069g 24 1 1069 0 0 [TeLuSa19] tejada19/UC_24h_1130g 24 1 1130 0 0 [TeLuSa19] tejada19/UC_24h_1376g 24 1 1376 0 0 [TeLuSa19] tejada19/UC_24h_1393g 24 1 1393 0 0 [TeLuSa19] tejada19/UC_24h_1577g 24 1 1577 0 0 [TeLuSa19] tejada19/UC_24h_1615g 24 1 1615 0 0 [TeLuSa19] tejada19/UC_24h_1632g 24 1 1632 0 0 [TeLuSa19] tejada19/UC_24h_1768g 24 1 1768 0 0 [TeLuSa19] tejada19/UC_24h_1804g 24 1 1804 0 0 [TeLuSa19] tejada19/UC_24h_1820g 24 1 1820 0 0 [TeLuSa19] tejada19/UC_24h_1823g 24 1 1823 0 0 [TeLuSa19] tejada19/UC_24h_1888g 24 1 1888 0 0 [TeLuSa19] tejada19/UC_168h_36g 168 1 36 0 0 [TeLuSa19] tejada19/UC_168h_38g 168 1 38 0 0 [TeLuSa19] tejada19/UC_168h_40g 168 1 40 0 0 [TeLuSa19] tejada19/UC_168h_53g 168 1 53 0 0 [TeLuSa19] tejada19/UC_168h_58g 168 1 58 0 0 [TeLuSa19] tejada19/UC_168h_59g 168 1 59 0 0 [TeLuSa19] tejada19/UC_168h_72g 168 1 72 0 0 [TeLuSa19] tejada19/UC_168h_84g 168 1 84 0 0 [TeLuSa19] tejada19/UC_168h_86g 168 1 86 0 0 [TeLuSa19] tejada19/UC_168h_88g 168 1 88 0 0 [TeLuSa19] tejada19/UC_168h_93g 168 1 93 0 0 [TeLuSa19] tejada19/UC_168h_105g 168 1 105 0 0 [TeLuSa19] tejada19/UC_168h_110g 168 1 110 0 0 [TeLuSa19] tejada19/UC_168h_125g 168 1 125 0 0 [TeLuSa19] tejada19/UC_168h_130g 168 1 130 0 0 [TeLuSa19] tejada19/UC_168h_131g 168 1 131 0 0 [TeLuSa19] tejada19/UC_168h_140g 168 1 140 0 0 [TeLuSa19] tejada19/UC_168h_165g 168 1 165 0 0 [TeLuSa19] tejada19/UC_168h_175g 168 1 175 0 0 [TeLuSa19] tejada19/UC_168h_179g 168 1 179 0 0 [TeLuSa19] tejada19/UC_168h_188g 168 1 188 0 0 [TeLuSa19] tejada19/UC_168h_192g 168 1 192 0 0 [TeLuSa19] tejada19/UC_168h_199g 168 1 199 0 0 [TeLuSa19]","title":"4. Tejada19"},{"location":"instances/#5-references","text":"[UCJL] Alinson S. Xavier, Feng Qiu. \"UnitCommitment.jl: A Julia/JuMP Optimization Package for Security-Constrained Unit Commitment\". Zenodo (2020). DOI: 10.5281/zenodo.4269874 [KnOsWa20] Bernard Knueven, James Ostrowski and Jean-Paul Watson. \"On Mixed-Integer Programming Formulations for the Unit Commitment Problem\". INFORMS Journal on Computing (2020). DOI: 10.1287/ijoc.2019.0944 [KrHiOn12] Eric Krall, Michael Higgins and Richard P. O\u2019Neill. \"RTO unit commitment test system.\" Federal Energy Regulatory Commission. Available at: https://www.ferc.gov/industries-data/electric/power-sales-and-markets/increasing-efficiency-through-improved-software-1 (Accessed: Nov 14, 2020) [BaBlEh19] Clayton Barrows, Aaron Bloom, Ali Ehlen, Jussi Ikaheimo, Jennie Jorgenson, Dheepak Krishnamurthy, Jessica Lau et al. \"The IEEE Reliability Test System: A Proposed 2019 Update.\" IEEE Transactions on Power Systems (2019). DOI: 10.1109/TPWRS.2019.2925557 [JoFlMa16] C. Josz, S. Fliscounakis, J. Maeght, and P. Panciatici. \"AC Power Flow Data in MATPOWER and QCQP Format: iTesla, RTE Snapshots, and PEGASE\". ArXiv (2016) . [FlPaCa13] S. Fliscounakis, P. Panciatici, F. Capitanescu, and L. Wehenkel. \"Contingency ranking with respect to overloads in very large power systems taking into account uncertainty, preventive and corrective actions\", Power Systems, IEEE Trans. on, (28)4:4909-4917, 2013. DOI: 10.1109/TPWRS.2013.2251015 [MTPWR] D. Zimmerman, C. E. Murillo-Sandnchez and R. J. Thomas. \"Matpower: Steady-state operations, planning, and analysis tools forpower systems research and education\", IEEE Transactions on PowerSystems, vol. 26, no. 1, pp. 12 \u201319, Feb. 2011. DOI: 10.1109/TPWRS.2010.2051168 [PSTCA] University of Washington, Dept. of Electrical Engineering. \"Power Systems Test Case Archive\". Available at: http://www.ee.washington.edu/research/pstca/ (Accessed: Nov 14, 2020) [ORLIB] J.E.Beasley. \"OR-Library: distributing test problems by electronic mail\", Journal of the Operational Research Society 41(11) (1990). DOI: 10.2307/2582903 [FrGe06] A. Frangioni, C. Gentile. \"Solving nonlinear single-unit commitment problems with ramping constraints\" Operations Research 54(4), p. 767 - 775, 2006. DOI: 10.1287/opre.1060.0309 [TeLuSa19] D. A. Tejada-Arango, S. Lumbreras, P. Sanchez-Martin and A. Ramos. \"Which Unit-Commitment Formulation is Best? A Systematic Comparison,\" in IEEE Transactions on Power Systems. DOI: 10.1109/TPWRS.2019.2962024 .","title":"5. References"},{"location":"usage/","text":"Usage 1. Installation UnitCommitment.jl was tested and developed with Julia 1.5 . To install Julia, please follow the installation guide on the official Julia website . To install UnitCommitment.jl, run the Julia interpreter, type ] to open the package manager, then type: pkg> add UnitCommitment To test that the package has been correctly installed, run: pkg> test UnitCommitment If all tests pass, the package should now be ready to be used by any Julia script on the machine. To solve the optimization models, a mixed-integer linear programming (MILP) solver is also required. Please see the JuMP installation guide for more instructions on installing a solver. Typical open-source choices are Cbc and GLPK . In the instructions below, Cbc will be used, but any other MILP solver listed in JuMP installation guide should also be compatible. 2. Typical Usage 2.1 Solving user-provided instances The first step to use UC.jl is to construct a JSON file describing your unit commitment instance. See the data format page for a complete description of the data format UC.jl expects. The next steps, as shown below, are to read the instance from file, construct the optimization model, run the optimization and extract the optimal solution. using Cbc using JSON using UnitCommitment # Read instance instance = UnitCommitment.read(\"/path/to/input.json\") # Construct optimization model model = UnitCommitment.build_model(instance=instance, optimizer=Cbc.Optimizer) # Solve model UnitCommitment.optimize!(model) # Extract solution and write it to a file solution = UnitCommitment.get_solution(model) open(\"/path/to/output.json\", \"w\") do file JSON.print(file, solution, 2) end 2.2 Solving benchmark instances As described in the Instances page , UnitCommitment.jl contains a number of benchmark instances collected from the literature. To solve one of these instances individually, instead of constructing your own, the function read_benchmark can be used: using UnitCommitment instance = UnitCommitment.read_benchmark(\"matpower/case3375wp/2017-02-01\") 3. Advanced usage 3.1 Modifying the formulation For the time being, the recommended way of modifying the MILP formulation used by UC.jl is to create a local copy of our git repository and directly modify the source code of the package. In a future version, it will be possible to switch between multiple formulations, or to simply add/remove constraints after the model has been generated. 3.2 Generating initial conditions When creating random unit commitment instances for benchmark purposes, it is often hard to compute, in advance, sensible initial conditions for all generators. Setting initial conditions naively (for example, making all generators initially off and producing no power) can easily cause the instance to become infeasible due to excessive ramping. Initial conditions can also make it hard to modify existing instances. For example, increasing the system load without carefully modifying the initial conditions may make the problem infeasible or unrealistically challenging to solve. To help with this issue, UC.jl provides a utility function which can generate feasible initial conditions by solving a single-period optimization problem, as shown below: using Cbc using UnitCommitment # Read original instance instance = UnitCommitment.read(\"instance.json\") # Generate initial conditions (in-place) UnitCommitment.generate_initial_conditions!(instance, Cbc.Optimizer) # Construct and solve optimization model model = UnitCommitment.build_model(instance, Cbc.Optimizer) UnitCommitment.optimize!(model) Warning The function generate_initial_conditions! may return different initial conditions after each call, even if the same instance and the same optimizer is provided. The particular algorithm may also change in a future version of UC.jl. For these reasons, it is recommended that you generate initial conditions exactly once for each instance and store them for later use. 3.3 Verifying solutions When developing new formulations, it is very easy to introduce subtle errors in the model that result in incorrect solutions. To help with this, UC.jl includes a utility function that verifies if a given solution is feasible, and, if not, prints all the validation errors it found. The implementation of this function is completely independent from the implementation of the optimization model, and therefore can be used to validate it. The function can also be used to verify solutions produced by other optimization packages, as long as they follow the UC.jl data format . using JSON using UnitCommitment # Read instance instance = UnitCommitment.read(\"instance.json\") # Read solution (potentially produced by other packages) solution = JSON.parsefile(\"solution.json\") # Validate solution and print validation errors UnitCommitment.validate(instance, solution)","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#1-installation","text":"UnitCommitment.jl was tested and developed with Julia 1.5 . To install Julia, please follow the installation guide on the official Julia website . To install UnitCommitment.jl, run the Julia interpreter, type ] to open the package manager, then type: pkg> add UnitCommitment To test that the package has been correctly installed, run: pkg> test UnitCommitment If all tests pass, the package should now be ready to be used by any Julia script on the machine. To solve the optimization models, a mixed-integer linear programming (MILP) solver is also required. Please see the JuMP installation guide for more instructions on installing a solver. Typical open-source choices are Cbc and GLPK . In the instructions below, Cbc will be used, but any other MILP solver listed in JuMP installation guide should also be compatible.","title":"1. Installation"},{"location":"usage/#2-typical-usage","text":"","title":"2. Typical Usage"},{"location":"usage/#21-solving-user-provided-instances","text":"The first step to use UC.jl is to construct a JSON file describing your unit commitment instance. See the data format page for a complete description of the data format UC.jl expects. The next steps, as shown below, are to read the instance from file, construct the optimization model, run the optimization and extract the optimal solution. using Cbc using JSON using UnitCommitment # Read instance instance = UnitCommitment.read(\"/path/to/input.json\") # Construct optimization model model = UnitCommitment.build_model(instance=instance, optimizer=Cbc.Optimizer) # Solve model UnitCommitment.optimize!(model) # Extract solution and write it to a file solution = UnitCommitment.get_solution(model) open(\"/path/to/output.json\", \"w\") do file JSON.print(file, solution, 2) end","title":"2.1 Solving user-provided instances"},{"location":"usage/#22-solving-benchmark-instances","text":"As described in the Instances page , UnitCommitment.jl contains a number of benchmark instances collected from the literature. To solve one of these instances individually, instead of constructing your own, the function read_benchmark can be used: using UnitCommitment instance = UnitCommitment.read_benchmark(\"matpower/case3375wp/2017-02-01\")","title":"2.2 Solving benchmark instances"},{"location":"usage/#3-advanced-usage","text":"","title":"3. Advanced usage"},{"location":"usage/#31-modifying-the-formulation","text":"For the time being, the recommended way of modifying the MILP formulation used by UC.jl is to create a local copy of our git repository and directly modify the source code of the package. In a future version, it will be possible to switch between multiple formulations, or to simply add/remove constraints after the model has been generated.","title":"3.1 Modifying the formulation"},{"location":"usage/#32-generating-initial-conditions","text":"When creating random unit commitment instances for benchmark purposes, it is often hard to compute, in advance, sensible initial conditions for all generators. Setting initial conditions naively (for example, making all generators initially off and producing no power) can easily cause the instance to become infeasible due to excessive ramping. Initial conditions can also make it hard to modify existing instances. For example, increasing the system load without carefully modifying the initial conditions may make the problem infeasible or unrealistically challenging to solve. To help with this issue, UC.jl provides a utility function which can generate feasible initial conditions by solving a single-period optimization problem, as shown below: using Cbc using UnitCommitment # Read original instance instance = UnitCommitment.read(\"instance.json\") # Generate initial conditions (in-place) UnitCommitment.generate_initial_conditions!(instance, Cbc.Optimizer) # Construct and solve optimization model model = UnitCommitment.build_model(instance, Cbc.Optimizer) UnitCommitment.optimize!(model) Warning The function generate_initial_conditions! may return different initial conditions after each call, even if the same instance and the same optimizer is provided. The particular algorithm may also change in a future version of UC.jl. For these reasons, it is recommended that you generate initial conditions exactly once for each instance and store them for later use.","title":"3.2 Generating initial conditions"},{"location":"usage/#33-verifying-solutions","text":"When developing new formulations, it is very easy to introduce subtle errors in the model that result in incorrect solutions. To help with this, UC.jl includes a utility function that verifies if a given solution is feasible, and, if not, prints all the validation errors it found. The implementation of this function is completely independent from the implementation of the optimization model, and therefore can be used to validate it. The function can also be used to verify solutions produced by other optimization packages, as long as they follow the UC.jl data format . using JSON using UnitCommitment # Read instance instance = UnitCommitment.read(\"instance.json\") # Read solution (potentially produced by other packages) solution = JSON.parsefile(\"solution.json\") # Validate solution and print validation errors UnitCommitment.validate(instance, solution)","title":"3.3 Verifying solutions"}]}